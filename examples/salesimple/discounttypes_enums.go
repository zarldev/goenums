// DO NOT EDIT.
// code generated by goenums 'v0.3.8' at 2025-05-02 22:50:44.
// github.com/zarldev/goenums
//
// using the command:
//
// goenums -f discount.go

package sale

import (
	"bytes"
	"database/sql/driver"
	"fmt"
	"iter"
	"strconv"
)

type DiscountType struct {
	discountType
}

type discounttypesContainer struct {
	SALE       DiscountType
	PERCENTAGE DiscountType
	AMOUNT     DiscountType
	GIVEAWAY   DiscountType
}

var Discounttypes = discounttypesContainer{
	SALE: DiscountType{
		discountType: sale,
	},
	PERCENTAGE: DiscountType{
		discountType: percentage,
	},
	AMOUNT: DiscountType{
		discountType: amount,
	},
	GIVEAWAY: DiscountType{
		discountType: giveaway,
	},
}

// invalidDiscountType represents an invalid or undefined DiscountType value.
// It is used as a default return value for failed parsing or conversion operations.
var invalidDiscountType = DiscountType{}

// allSlice is an internal method that returns all valid DiscountType values as a slice.
func (c discounttypesContainer) allSlice() []DiscountType {
	return []DiscountType{
		c.SALE,
		c.PERCENTAGE,
		c.AMOUNT,
		c.GIVEAWAY,
	}
}

// AllSlice returns all valid DiscountType values as a slice.
func (c discounttypesContainer) AllSlice() []DiscountType {
	return c.allSlice()
}

// All returns all valid DiscountType values.
// In Go 1.23+, this can be used with range-over-function iteration:
// ```
//
//	for v := range Discounttypes.All() {
//	    // process each enum value
//	}
//
// ```
func (c discounttypesContainer) All() iter.Seq[DiscountType] {
	return func(yield func(DiscountType) bool) {
		for _, v := range c.allSlice() {
			if !yield(v) {
				return
			}
		}
	}
}

// ParseDiscountType converts various input types to a DiscountType value.
// It accepts the following types:
// - DiscountType: returns the value directly
// - string: parses the string representation
// - []byte: converts to string and parses
// - fmt.Stringer: uses the String() result for parsing
// - int/int32/int64: converts the integer to the corresponding enum value
//
// If the input cannot be converted to a valid DiscountType value, it returns
// the invalidDiscountType value and an error.
func ParseDiscountType(a any) (DiscountType, error) {
	res := invalidDiscountType
	switch v := a.(type) {
	case DiscountType:
		return v, nil
	case []byte:
		res = stringToDiscountType(string(v))
	case string:
		res = stringToDiscountType(v)
	case fmt.Stringer:
		res = stringToDiscountType(v.String())
	case int:
		res = intToDiscountType(v)
	case int64:
		res = intToDiscountType(int(v))
	case int32:
		res = intToDiscountType(int(v))
	}
	if res == invalidDiscountType {
		return res, fmt.Errorf("failed to parse DiscountType value - invalid input: %v", a)
	}
	return res, nil
}

// stringToDiscountType is an internal function that converts a string to a DiscountType value.
// It uses a predefined mapping of string representations to enum values.
var (
	discounttypesNameMap = map[string]DiscountType{
		"sale":       Discounttypes.SALE,       // primary alias
		"percentage": Discounttypes.PERCENTAGE, // primary alias
		"amount":     Discounttypes.AMOUNT,     // primary alias
		"giveaway":   Discounttypes.GIVEAWAY,   // primary alias
	}
)

func stringToDiscountType(s string) DiscountType {
	if v, ok := discounttypesNameMap[s]; ok {
		return v
	}
	return invalidDiscountType
}

// intToDiscountType converts an integer to a DiscountType value.
// The integer is treated as the ordinal position in the enum sequence.
// The input is adjusted by -1 to account for the enum starting value.
// If the integer doesn't correspond to a valid enum value, invalidDiscountType is returned.
func intToDiscountType(i int) DiscountType {
	i = i - 1
	if i < 0 || i >= len(Discounttypes.allSlice()) {
		return invalidDiscountType
	}
	return Discounttypes.allSlice()[i]
}

// ExhaustiveDiscounttypes calls the provided function once for each valid Discounttypes value.
// This is useful for switch statement exhaustiveness checking and for processing all enum values.
// Example usage:
// ```
//
//	ExhaustiveDiscounttypes(func(x DiscountType) {
//	    switch x {
//	    case Discounttypes.Giveaway:
//	        // handle Giveaway
//	    }
//	})
//
// ```
func ExhaustiveDiscounttypes(f func(DiscountType)) {
	for _, p := range Discounttypes.allSlice() {
		f(p)
	}
}

// validDiscounttypes is a map of valid DiscountType values.
var validDiscounttypes = map[DiscountType]bool{
	Discounttypes.SALE:       true,
	Discounttypes.PERCENTAGE: true,
	Discounttypes.AMOUNT:     true,
	Discounttypes.GIVEAWAY:   true,
}

// IsValid checks whether the DiscountType value is valid.
// A valid value is one that is defined in the original enum and not marked as invalid.
func (p DiscountType) IsValid() bool {
	return validDiscounttypes[p]
}

// MarshalJSON implements the json.Marshaler interface for DiscountType.
// The enum value is encoded as its string representation.
func (p DiscountType) MarshalJSON() ([]byte, error) {
	return []byte(`"` + p.String() + `"`), nil
}

// UnmarshalJSON implements the json.Unmarshaler interface for DiscountType.
// It supports unmarshaling from a string representation of the enum.
func (p *DiscountType) UnmarshalJSON(b []byte) error {
	b = bytes.Trim(bytes.Trim(b, `"`), ` `)
	newp, err := ParseDiscountType(b)
	if err != nil {
		return err
	}
	*p = newp
	return nil
}

// Scan implements the sql.Scanner interface for DiscountType.
// This allows DiscountType values to be scanned directly from database queries.
// It supports scanning from strings, []byte, or integers.
func (p *DiscountType) Scan(value any) error {
	newp, err := ParseDiscountType(value)
	if err != nil {
		return err
	}
	*p = newp
	return nil
}

// Value implements the driver.Valuer interface for DiscountType.
// This allows DiscountType values to be saved to databases.
// The value is stored as a string representation of the enum.
func (p DiscountType) Value() (driver.Value, error) {
	return p.String(), nil
}

// MarshalBinary implements the encoding.BinaryMarshaler interface for DiscountType.
// It encodes the enum value as a byte slice.
func (p DiscountType) MarshalBinary() ([]byte, error) {
	return []byte(p.String()), nil
}

// UnmarshalBinary implements the encoding.BinaryUnmarshaler interface for DiscountType.
// It decodes the enum value from a byte slice.
func (p *DiscountType) UnmarshalBinary(b []byte) error {
	newp, err := ParseDiscountType(b)
	if err != nil {
		return err
	}
	*p = newp
	return nil
}

// MarshalText implements the encoding.TextMarshaler interface for DiscountType.
// The enum value is encoded as its string representation.
func (p DiscountType) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for DiscountType.
// It supports unmarshaling from a string representation of the enum.
func (p *DiscountType) UnmarshalText(b []byte) error {
	newp, err := ParseDiscountType(b)
	if err != nil {
		return err
	}
	*p = newp
	return nil
}

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the goenums command to generate them again.
	// Does not identify newly added constant values unless order changes
	var x [1]struct{}
	_ = x[sale-1]
	_ = x[percentage-2]
	_ = x[amount-3]
	_ = x[giveaway-4]
}

const discounttypesName = "salepercentageamountgiveaway"

var discounttypesIdx = [...]uint16{0, 0, 4, 14, 20, 28}

// String returns the string representation of the DiscountType value.
// For valid values, it returns the name of the constant.
// For invalid values, it returns a string in the format "discounttypes(N)",
// where N is the numeric value.
func (i discountType) String() string {
	if i < 1 || i >= discountType(len(discounttypesIdx)-1) {
		return "discounttypes(" + (strconv.FormatInt(int64(i), 10) + ")")
	}
	return discounttypesName[discounttypesIdx[i]:discounttypesIdx[i+1]]
}
