// DO NOT EDIT.
// Code generated by goenums 'v0.3.6' at 2025-04-19 03:12:50.
// github.com/zarldev/goenums
//
// using the command:
// goenums -f discount.go

package sale

import (
	"bytes"
	"database/sql/driver"
	"fmt"
	"iter"
	"strconv"
	"time"
)

type Discounttype struct {
	discountType
	Available bool
	Started   bool
	Finished  bool
	Cancelled bool
	Duration  time.Duration
}

type discounttypesContainer struct {
	SALE       Discounttype
	PERCENTAGE Discounttype
	AMOUNT     Discounttype
	GIVEAWAY   Discounttype
}

var Discounttypes = discounttypesContainer{
	SALE: Discounttype{
		discountType: sale,
		Available:    false,
		Started:      true,
		Finished:     true,
		Cancelled:    false,
		Duration:     time.Hour * 0,
	},
	PERCENTAGE: Discounttype{
		discountType: percentage,
		Available:    false,
		Started:      false,
		Finished:     false,
		Cancelled:    false,
		Duration:     time.Hour * 0,
	},
	AMOUNT: Discounttype{
		discountType: amount,
		Available:    false,
		Started:      false,
		Finished:     false,
		Cancelled:    false,
		Duration:     time.Hour * 0,
	},
	GIVEAWAY: Discounttype{
		discountType: giveaway,
		Available:    true,
		Started:      true,
		Finished:     false,
		Cancelled:    false,
		Duration:     time.Hour * 0,
	},
}

// invalidDiscounttype represents an invalid or undefined Discounttype value.
// It is used as a default return value for failed parsing or conversion operations.
var invalidDiscounttype = Discounttype{}

// allSlice is an internal method that returns all valid Discounttype values as a slice.
func (c discounttypesContainer) allSlice() []Discounttype {
	return []Discounttype{
		c.SALE,
		c.PERCENTAGE,
		c.AMOUNT,
		c.GIVEAWAY,
	}
}

// AllSlice returns all valid Discounttype values as a slice.
// Deprecated: Use All() with Go 1.21+ range over function types instead.
func (c discounttypesContainer) AllSlice() []Discounttype {
	return c.allSlice()
}

// All returns all valid Discounttype values.
// In Go 1.21+, this can be used with range-over-function iteration:
// ```
//
//	for v := range Discounttypes.All() {
//	    // process each enum value
//	}
//
// ```
func (c discounttypesContainer) All() iter.Seq[Discounttype] {
	return func(yield func(Discounttype) bool) {
		for _, v := range c.allSlice() {
			if !yield(v) {
				return
			}
		}
	}
}

// ParseDiscounttype converts various input types to a Discounttype value.
// It accepts the following types:
// - Discounttype: returns the value directly
// - string: parses the string representation
// - []byte: converts to string and parses
// - fmt.Stringer: uses the String() result for parsing
// - int/int32/int64: converts the integer to the corresponding enum value
//
// If the input cannot be converted to a valid Discounttype value, it returns
// the invalidDiscounttype value and an error.
func ParseDiscounttype(a any) (Discounttype, error) {
	res := invalidDiscounttype
	switch v := a.(type) {
	case Discounttype:
		return v, nil
	case []byte:
		res = stringToDiscounttype(string(v))
	case string:
		res = stringToDiscounttype(v)
	case fmt.Stringer:
		res = stringToDiscounttype(v.String())
	case int:
		res = intToDiscounttype(v)
	case int64:
		res = intToDiscounttype(int(v))
	case int32:
		res = intToDiscounttype(int(v))
	}
	if res == invalidDiscounttype {
		return res, fmt.Errorf("failed to parse Discounttype value - invalid input: %v", a)
	}
	return res, nil
}

// stringToDiscounttype is an internal function that converts a string to a Discounttype value.
// It uses a predefined mapping of string representations to enum values.
var (
	_discounttypesNameMap = map[string]Discounttype{
		"sale":       Discounttypes.SALE,       // Primary alias
		"percentage": Discounttypes.PERCENTAGE, // Primary alias
		"amount":     Discounttypes.AMOUNT,     // Primary alias
		"giveaway":   Discounttypes.GIVEAWAY,   // Primary alias
	}
)

func stringToDiscounttype(s string) Discounttype {
	if v, ok := _discounttypesNameMap[s]; ok {
		return v
	}
	return invalidDiscounttype
}

// intToDiscounttype converts an integer to a Discounttype value.
// The integer is treated as the ordinal position in the enum sequence.
// The input is adjusted by -1 to account for the enum starting value.
// If the integer doesn't correspond to a valid enum value, invalidDiscounttype is returned.
func intToDiscounttype(i int) Discounttype {
	i = i - 1
	if i < 0 || i >= len(Discounttypes.allSlice()) {
		return invalidDiscounttype
	}
	return Discounttypes.allSlice()[i]
}

// ExhaustiveDiscounttypes calls the provided function once for each valid Discounttypes value.
// This is useful for switch statement exhaustiveness checking and for processing all enum values.
// Example usage:
// ```
//
//	ExhaustiveDiscounttypes(func(x Discounttype) {
//	    switch x {
//	    case Discounttypes.Giveaway:
//	        // handle Giveaway
//	    }
//	})
//
// ```
func ExhaustiveDiscounttypes(f func(Discounttype)) {
	for _, p := range Discounttypes.allSlice() {
		f(p)
	}
}

// validDiscounttypes is a map of valid Discounttype values.
var validDiscounttypes = map[Discounttype]bool{
	Discounttypes.SALE:       true,
	Discounttypes.PERCENTAGE: true,
	Discounttypes.AMOUNT:     true,
	Discounttypes.GIVEAWAY:   true,
}

// IsValid checks whether the Discounttype value is valid.
// A valid value is one that is defined in the original enum and not marked as invalid.
func (p Discounttype) IsValid() bool {
	return validDiscounttypes[p]
}

// MarshalJSON implements the json.Marshaler interface for Discounttype.
// The enum value is encoded as its string representation.
func (p Discounttype) MarshalJSON() ([]byte, error) {
	return []byte(`"` + p.String() + `"`), nil
}

// UnmarshalJSON implements the json.Unmarshaler interface for Discounttype.
// It supports unmarshaling from a string representation of the enum.
func (p *Discounttype) UnmarshalJSON(b []byte) error {
	b = bytes.Trim(bytes.Trim(b, `"`), ` `)
	newp, err := ParseDiscounttype(b)
	if err != nil {
		return err
	}
	*p = newp
	return nil
}

// Scan implements the sql.Scanner interface for Discounttype.
// This allows Discounttype values to be scanned directly from database queries.
// It supports scanning from strings, []byte, or integers.
func (p *Discounttype) Scan(value any) error {
	newp, err := ParseDiscounttype(value)
	if err != nil {
		return err
	}
	*p = newp
	return nil
}

// Value implements the driver.Valuer interface for Discounttype.
// This allows Discounttype values to be saved to databases.
// The value is stored as a string representation of the enum.
func (p Discounttype) Value() (driver.Value, error) {
	return p.String(), nil
}

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the goenums command to generate them again.
	// Does not identify newly added constant values unless order changes
	var x [1]struct{}
	_ = x[sale-1]
	_ = x[percentage-2]
	_ = x[amount-3]
	_ = x[giveaway-4]
}

const _discounttypes_name = "salepercentageamountgiveaway"

var _discounttypes_index = [...]uint16{0, 0, 4, 14, 20, 28}

// String returns the string representation of the Discounttype value.
// For valid values, it returns the name of the constant.
// For invalid values, it returns a string in the format "discounttypes(N)",
// where N is the numeric value.
func (i discountType) String() string {
	if i < 1 || i >= discountType(len(_discounttypes_index)-1) {
		return "discounttypes(" + (strconv.FormatInt(int64(i), 10) + ")")
	}
	return _discounttypes_name[_discounttypes_index[i]:_discounttypes_index[i+1]]
}
