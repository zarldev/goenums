// code generated by goenums v0.4.0 at Jun  3 01:58:16. DO NOT EDIT.
//
// github.com/zarldev/goenums
//
// using the command:
// goenums goenums status.gostatus.go

package validationstrings

import (
	"bytes"
	"context"
	"database/sql/driver"
	"fmt"
	"iter"
	"math"

	"golang.org/x/exp/constraints"
)

// Status is a type that represents a single enum value.
// It combines the core information about the enum constant and it's defined fields.
type Status struct {
	status
}

// statusesContainer is the container for all enum values.
// It is private and should not be used directly use the public methods on the Status type.
type statusesContainer struct {
	FAILED    Status
	PASSED    Status
	SKIPPED   Status
	SCHEDULED Status
	RUNNING   Status
	BOOKED    Status
}

// Statuses is a main entry point using the Status type.
// It it a container for all enum values and provides a convenient way to access all enum values and perform
// operations, with convenience methods for common use cases.
var Statuses = statusesContainer{
	FAILED: Status{
		status: failed,
	},
	PASSED: Status{
		status: passed,
	},
	SKIPPED: Status{
		status: skipped,
	},
	SCHEDULED: Status{
		status: scheduled,
	},
	RUNNING: Status{
		status: running,
	},
	BOOKED: Status{
		status: booked,
	},
}

// invalidStatus is an invalid sentinel value for Status
var invalidStatus = Status{}

// allSlice returns a slice of all enum values.
// This method is useful for iterating over all enum values in a loop.
func (s statusesContainer) allSlice() []Status {
	return []Status{
		Statuses.FAILED,
		Statuses.PASSED,
		Statuses.SKIPPED,
		Statuses.SCHEDULED,
		Statuses.RUNNING,
		Statuses.BOOKED,
	}
}

// All returns an iterator over all enum values.
// This method is useful for iterating over all enum values in a loop.
func (s statusesContainer) All() iter.Seq[Status] {
	return func(yield func(Status) bool) {
		for _, v := range s.allSlice() {
			if !yield(v) {
				return
			}
		}
	}
}

// ParseStatus parses the input value into an enum value.
// It returns the parsed enum value or an error if the input is invalid.
// It is a convenience function that can be used to parse enum values from
// various input types, such as strings, byte slices, or other enum types.
func ParseStatus(input any) (Status, error) {
	var res = invalidStatus
	switch v := input.(type) {
	case Status:
		return v, nil
	case string:
		res = stringToStatus(v)
	case fmt.Stringer:
		res = stringToStatus(v.String())
	case []byte:
		res = stringToStatus(string(v))
	case int:
		res = numberToStatus(v)
	case int8:
		res = numberToStatus(v)
	case int16:
		res = numberToStatus(v)
	case int32:
		res = numberToStatus(v)
	case int64:
		res = numberToStatus(v)
	case uint:
		res = numberToStatus(v)
	case uint8:
		res = numberToStatus(v)
	case uint16:
		res = numberToStatus(v)
	case uint32:
		res = numberToStatus(v)
	case uint64:
		res = numberToStatus(v)
	case float32:
		res = numberToStatus(v)
	case float64:
		res = numberToStatus(v)
	default:
		return res, fmt.Errorf("invalid type %T", input)
	}
	return res, nil
}

// statusesNameMap is a map of enum values to their Status representation
// It is used to convert string representations of enum values into their Status representation.
var statusesNameMap = map[string]Status{
	"FAILED":    Statuses.FAILED,
	"PASSED":    Statuses.PASSED,
	"SKIPPED":   Statuses.SKIPPED,
	"SCHEDULED": Statuses.SCHEDULED,
	"RUNNING":   Statuses.RUNNING,
	"BOOKED":    Statuses.BOOKED,
}

// stringToStatus converts a string representation of an enum value into its Status representation
// It returns the Status representation of the enum value if the string is valid
// Otherwise, it returns invalidStatus
func stringToStatus(s string) Status {
	if t, ok := statusesNameMap[s]; ok {
		return t
	}
	return invalidStatus
}

// numberToStatus converts a numeric value to a Status
// It returns the Status representation of the enum value if the numeric value is valid
// Otherwise, it returns invalidStatus
func numberToStatus[T constraints.Integer | constraints.Float](num T) Status {
	f := float64(num)
	if math.Floor(f) != f {
		return invalidStatus
	}
	i := int(f)
	if i <= 0 || i > len(Statuses.allSlice()) {
		return invalidStatus
	}
	return Statuses.allSlice()[i]
}

// ExhaustiveStatuses iterates over all enum values and calls the provided function for each value.
// This function is useful for performing operations on all valid enum values in a loop.
func ExhaustiveStatuses(f func(Status)) {
	for _, p := range Statuses.allSlice() {
		f(p)
	}
}

// validStatuses is a map of enum values to their validity
var validStatuses = map[Status]bool{
	Statuses.FAILED:    false,
	Statuses.PASSED:    true,
	Statuses.SKIPPED:   true,
	Statuses.SCHEDULED: true,
	Statuses.RUNNING:   true,
	Statuses.BOOKED:    true,
}

// IsValid checks whether the Statuses value is valid.
// A valid value is one that is defined in the original enum and not marked as invalid.
func (s Status) IsValid() bool {
	return validStatuses[s]
}

// MarshalJSON implements the json.Marshaler interface for Status.
// It returns the JSON representation of the enum value as a byte slice.
func (s Status) MarshalJSON() ([]byte, error) {
	return []byte("\"" + s.String() + "\""), nil
}

// UnmarshalJSON implements the json.Unmarshaler interface for Status.
// It parses the JSON representation of the enum value from the byte slice.
// It returns an error if the input is not a valid JSON representation.
func (s *Status) UnmarshalJSON(b []byte) error {
	b = bytes.Trim(bytes.Trim(b, "\""), "\"")
	news, err := ParseStatus(b)
	if err != nil {
		return err
	}
	*s = news
	return nil
}

// MarshalText implements the encoding.TextMarshaler interface for Status.
// It returns the string representation of the enum value as a byte slice
func (s Status) MarshalText() ([]byte, error) {
	return []byte("\"" + s.String() + "\""), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for Status.
// It parses the string representation of the enum value from the byte slice.
// It returns an error if the byte slice does not contain a valid enum value.
func (s *Status) UnmarshalText(b []byte) error {
	news, err := ParseStatus(b)
	if err != nil {
		return err
	}
	*s = news
	return nil
}

// Scan implements the database/sql.Scanner interface for Status.
// It parses the string representation of the enum value from the database row.
// It returns an error if the row does not contain a valid enum value.
func (s *Status) Scan(value any) error {
	news, err := ParseStatus(value)
	if err != nil {
		return err
	}
	*s = news
	return nil
}

// Value implements the database/sql/driver.Valuer interface for Status.
// It returns the string representation of the enum value.
func (s Status) Value() (driver.Value, error) {
	return s.String(), nil
}

// MarshalBinary implements the encoding.BinaryMarshaler interface for Status.
// It returns the binary representation of the enum value as a byte slice.
func (s Status) MarshalBinary() ([]byte, error) {
	return []byte("\"" + s.String() + "\""), nil
}

// UnmarshalBinary implements the encoding.BinaryUnmarshaler interface for Status.
// It parses the binary representation of the enum value from the byte slice.
// It returns an error if the byte slice does not contain a valid enum value.
func (s *Status) UnmarshalBinary(b []byte) error {
	news, err := ParseStatus(b)
	if err != nil {
		return err
	}
	*s = news
	return nil
}

// MarshalYAML implements the yaml.Marshaler interface for Status.
// It returns the string representation of the enum value.
// It returns an error if the enum value is invalid.
func (s Status) MarshalYAML() (any, error) {
	return s.String(), nil
}

// UnmarshalYAML implements the yaml.Unmarshaler interface for Status.
// It parses the string representation of the enum value from the YAML node.
// It returns an error if the YAML node does not contain a valid enum value.
func (s *Status) UnmarshalYAML(ctx context.Context, f func(any) error) error {
	select {
	case <-ctx.Done():
		return ctx.Err()
	default:
	}
	return f(s.String())
}

// statusNames is a constant string slice containing all enum values cononical absolute names
const statusNames = "FAILEDPASSEDSKIPPEDSCHEDULEDRUNNINGBOOKED"

// statusNamesMap is a map of enum values to their canonical absolute
// name positions within the statusNames string slice
var statusNamesMap = map[Status]string{
	Statuses.FAILED:    statusNames[0:6],
	Statuses.PASSED:    statusNames[6:12],
	Statuses.SKIPPED:   statusNames[12:19],
	Statuses.SCHEDULED: statusNames[19:28],
	Statuses.RUNNING:   statusNames[28:35],
	Statuses.BOOKED:    statusNames[35:41],
}

// String implements the Stringer interface.
// It returns the canonical absolute name of the enum value.
func (s Status) String() string {
	if str, ok := statusNamesMap[s]; ok {
		return str
	}
	return fmt.Sprintf("status(%d)", s.status)
}

// Compile-time check that all enum values are valid.
// This function is used to ensure that all enum values are defined and valid.
// It is called by the compiler to verify that the enum values are valid.
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the goenums command to generate them again.
	// Does not identify newly added constant values unless order changes
	var x [6]struct{}
	_ = x[failed-0]
	_ = x[passed-1]
	_ = x[skipped-2]
	_ = x[scheduled-3]
	_ = x[running-4]
	_ = x[booked-5]
}
