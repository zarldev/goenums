// DO NOT EDIT.
// code generated by goenums 'v0.4.1' at Jun 20 14:48:50.
//
// github.com/zarldev/goenums
//
// using the command:
// goenums -f discount.go

package discount

import (
	"bytes"
	"database/sql/driver"
	"fmt"
	"iter"
	"math"
	"time"

	"golang.org/x/exp/constraints"
)

// DiscountType is a type that represents a single enum value.
// It combines the core information about the enum constant and it's defined fields.
type DiscountType struct {
	discountType
	Available bool
	Started   bool
	Finished  bool
	Cancelled bool
	Duration  time.Duration
}

// discountTypesContainer is the container for all enum values.
// It is private and should not be used directly use the public methods on the DiscountType type.
type discountTypesContainer struct {
	SALE       DiscountType
	PERCENTAGE DiscountType
	AMOUNT     DiscountType
	GIVEAWAY   DiscountType
}

// DiscountTypes is a main entry point using the DiscountType type.
// It it a container for all enum values and provides a convenient way to access all enum values and perform
// operations, with convenience methods for common use cases.
var DiscountTypes = discountTypesContainer{
	SALE: DiscountType{
		discountType: sale,
		Available:    false,
		Started:      true,
		Finished:     true,
		Cancelled:    false,
		Duration:     time.Hour * 172,
	},
	PERCENTAGE: DiscountType{
		discountType: percentage,
		Available:    false,
		Started:      false,
		Finished:     false,
		Cancelled:    false,
		Duration:     time.Hour * 24,
	},
	AMOUNT: DiscountType{
		discountType: amount,
		Available:    false,
		Started:      false,
		Finished:     false,
		Cancelled:    false,
		Duration:     time.Hour * 48,
	},
	GIVEAWAY: DiscountType{
		discountType: giveaway,
		Available:    true,
		Started:      true,
		Finished:     false,
		Cancelled:    false,
		Duration:     time.Hour * 72,
	},
}

// invalidDiscountType is an invalid sentinel value for DiscountType
var invalidDiscountType = DiscountType{
	discountType: -1,
}

// allSlice returns a slice of all enum values.
// This method is useful for iterating over all enum values in a loop.
func (d discountTypesContainer) allSlice() []DiscountType {
	return []DiscountType{
		DiscountTypes.SALE,
		DiscountTypes.PERCENTAGE,
		DiscountTypes.AMOUNT,
		DiscountTypes.GIVEAWAY,
	}
}

// All returns an iterator over all enum values.
// This method is useful for iterating over all enum values in a loop.
func (d discountTypesContainer) All() iter.Seq[DiscountType] {
	return func(yield func(DiscountType) bool) {
		for _, v := range d.allSlice() {
			if !yield(v) {
				return
			}
		}
	}
}

// ParseDiscountType parses the input value into an enum value.
// It returns the parsed enum value or an error if the input is invalid.
// It is a convenience function that can be used to parse enum values from
// various input types, such as strings, byte slices, or other enum types.
func ParseDiscountType(input any) (DiscountType, error) {
	switch v := input.(type) {
	case DiscountType:
		return v, nil
	case string:
		if result := stringToDiscountType(v); result != nil {
			return *result, nil
		}
	case fmt.Stringer:
		if result := stringToDiscountType(v.String()); result != nil {
			return *result, nil
		}
	case []byte:
		if result := stringToDiscountType(string(v)); result != nil {
			return *result, nil
		}
	case int:
		if result := numberToDiscountType(v); result != nil {
			return *result, nil
		}
	case int8:
		if result := numberToDiscountType(v); result != nil {
			return *result, nil
		}
	case int16:
		if result := numberToDiscountType(v); result != nil {
			return *result, nil
		}
	case int32:
		if result := numberToDiscountType(v); result != nil {
			return *result, nil
		}
	case int64:
		if result := numberToDiscountType(v); result != nil {
			return *result, nil
		}
	case uint:
		if result := numberToDiscountType(v); result != nil {
			return *result, nil
		}
	case uint8:
		if result := numberToDiscountType(v); result != nil {
			return *result, nil
		}
	case uint16:
		if result := numberToDiscountType(v); result != nil {
			return *result, nil
		}
	case uint32:
		if result := numberToDiscountType(v); result != nil {
			return *result, nil
		}
	case uint64:
		if result := numberToDiscountType(v); result != nil {
			return *result, nil
		}
	case float32:
		if result := numberToDiscountType(v); result != nil {
			return *result, nil
		}
	case float64:
		if result := numberToDiscountType(v); result != nil {
			return *result, nil
		}
	default:
		return invalidDiscountType, fmt.Errorf("invalid type %T", input)
	}
	return invalidDiscountType, fmt.Errorf("invalid value %v", input)
}

// discountTypesNameMap is a map of enum values to their DiscountType representation
// It is used to convert string representations of enum values into their DiscountType representation.
var discountTypesNameMap = map[string]DiscountType{
	"sale":       DiscountTypes.SALE,
	"percentage": DiscountTypes.PERCENTAGE,
	"amount":     DiscountTypes.AMOUNT,
	"giveaway":   DiscountTypes.GIVEAWAY,
}

// stringToDiscountType converts a string representation of an enum value into its DiscountType representation
// It returns a pointer to the DiscountType representation of the enum value if the string is valid
// Otherwise, it returns nil
func stringToDiscountType(s string) *DiscountType {
	if t, ok := discountTypesNameMap[s]; ok {
		return &t
	}
	return nil
}

// numberToDiscountType converts a numeric value to a DiscountType
// It returns a pointer to the DiscountType representation of the enum value if the numeric value is valid
// Otherwise, it returns nil
func numberToDiscountType[T constraints.Integer | constraints.Float](num T) *DiscountType {
	f := float64(num)
	if math.Floor(f) != f {
		return nil
	}
	i := int(f)
	if i <= 0 || i > len(DiscountTypes.allSlice()) {
		return nil
	}
	result := DiscountTypes.allSlice()[i-1]
	if !result.IsValid() {
		return nil
	}
	return &result
}

// ExhaustiveDiscountTypes iterates over all enum values and calls the provided function for each value.
// This function is useful for performing operations on all valid enum values in a loop.
func ExhaustiveDiscountTypes(f func(DiscountType)) {
	for _, p := range DiscountTypes.allSlice() {
		f(p)
	}
}

// validDiscountTypes is a map of enum values to their validity
var validDiscountTypes = map[DiscountType]bool{
	DiscountTypes.SALE:       true,
	DiscountTypes.PERCENTAGE: true,
	DiscountTypes.AMOUNT:     true,
	DiscountTypes.GIVEAWAY:   true,
}

// IsValid checks whether the DiscountTypes value is valid.
// A valid value is one that is defined in the original enum and not marked as invalid.
func (d DiscountType) IsValid() bool {
	return validDiscountTypes[d]
}

// MarshalJSON implements the json.Marshaler interface for DiscountType.
// It returns the JSON representation of the enum value as a byte slice.
func (d DiscountType) MarshalJSON() ([]byte, error) {
	return []byte("\"" + d.String() + "\""), nil
}

// UnmarshalJSON implements the json.Unmarshaler interface for DiscountType.
// It parses the JSON representation of the enum value from the byte slice.
// It returns an error if the input is not a valid JSON representation.
func (d *DiscountType) UnmarshalJSON(b []byte) error {
	b = bytes.Trim(bytes.Trim(b, "\""), "\"")
	newd, err := ParseDiscountType(b)
	if err != nil {
		return err
	}
	*d = newd
	return nil
}

// MarshalText implements the encoding.TextMarshaler interface for DiscountType.
// It returns the string representation of the enum value as a byte slice
func (d DiscountType) MarshalText() ([]byte, error) {
	return []byte("\"" + d.String() + "\""), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for DiscountType.
// It parses the string representation of the enum value from the byte slice.
// It returns an error if the byte slice does not contain a valid enum value.
func (d *DiscountType) UnmarshalText(b []byte) error {
	newd, err := ParseDiscountType(b)
	if err != nil {
		return err
	}
	*d = newd
	return nil
}

// Scan implements the database/sql.Scanner interface for DiscountType.
// It parses the string representation of the enum value from the database row.
// It returns an error if the row does not contain a valid enum value.
func (d *DiscountType) Scan(value any) error {
	newd, err := ParseDiscountType(value)
	if err != nil {
		return err
	}
	*d = newd
	return nil
}

// Value implements the database/sql/driver.Valuer interface for DiscountType.
// It returns the string representation of the enum value.
func (d DiscountType) Value() (driver.Value, error) {
	return d.String(), nil
}

// MarshalBinary implements the encoding.BinaryMarshaler interface for DiscountType.
// It returns the binary representation of the enum value as a byte slice.
func (d DiscountType) MarshalBinary() ([]byte, error) {
	return []byte("\"" + d.String() + "\""), nil
}

// UnmarshalBinary implements the encoding.BinaryUnmarshaler interface for DiscountType.
// It parses the binary representation of the enum value from the byte slice.
// It returns an error if the byte slice does not contain a valid enum value.
func (d *DiscountType) UnmarshalBinary(b []byte) error {
	newd, err := ParseDiscountType(b)
	if err != nil {
		return err
	}
	*d = newd
	return nil
}

// MarshalYAML implements the yaml.Marshaler interface for DiscountType.
// It returns the string representation of the enum value.
func (d DiscountType) MarshalYAML() ([]byte, error) {
	return []byte(d.String()), nil
}

// UnmarshalYAML implements the yaml.Unmarshaler interface for Planet.
// It parses the byte slice representation of the enum value and returns an error
// if the YAML byte slice does not contain a valid enum value.
func (d *DiscountType) UnmarshalYAML(b []byte) error {
	newd, err := ParseDiscountType(b)
	if err != nil {
		return err
	}
	*d = newd
	return nil
}

// discounttypeNames is a constant string slice containing all enum values cononical absolute names
const discounttypeNames = "salepercentageamountgiveaway"

// discounttypeNamesMap is a map of enum values to their canonical absolute
// name positions within the discounttypeNames string slice
var discounttypeNamesMap = map[DiscountType]string{
	DiscountTypes.SALE:       discounttypeNames[0:4],
	DiscountTypes.PERCENTAGE: discounttypeNames[4:14],
	DiscountTypes.AMOUNT:     discounttypeNames[14:20],
	DiscountTypes.GIVEAWAY:   discounttypeNames[20:28],
}

// String implements the Stringer interface.
// It returns the canonical absolute name of the enum value.
func (d DiscountType) String() string {
	if str, ok := discounttypeNamesMap[d]; ok {
		return str
	}
	return fmt.Sprintf("discounttype(%d)", d.discountType)
}

// Compile-time check that all enum values are valid.
// This function is used to ensure that all enum values are defined and valid.
// It is called by the compiler to verify that the enum values are valid.
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the goenums command to generate them again.
	// Does not identify newly added constant values unless order changes
	_ = [1]struct{}{}[sale-1]
	_ = [1]struct{}{}[percentage-2]
	_ = [1]struct{}{}[amount-3]
	_ = [1]struct{}{}[giveaway-4]
}
