// code generated by goenums 'v0.4.0' at May 28 00:28:23. DO NOT EDIT.
//
// github.com/zarldev/goenums
//
// using the command:
// goenums -fsale.go

package sale

import (
	"bytes"
	"context"
	"database/sql/driver"
	"fmt"
	"iter"
	"math"
	"time"

	"golang.org/x/exp/constraints"
)

// Sale is a type that represents a single enum value.
// It combines the core information about the enum constant and it's defined fields.
type Sale struct {
	sale
	Available bool
	Started   bool
	Finished  bool
	Cancelled bool
	Duration  time.Duration
}

// salesContainer is the container for all enum values.
// It is private and should not be used directly use the public methods on the Sale type.
type salesContainer struct {
	SALES      Sale
	PERCENTAGE Sale
	AMOUNT     Sale
	GIVEAWAY   Sale
}

// Sales is a main entry point using the Sale type.
// It it a container for all enum values and provides a convenient way to access all enum values and perform
// operations, with convenience methods for common use cases.
var Sales = salesContainer{
	SALES: Sale{
		sale:      sales,
		Available: false,
		Started:   true,
		Finished:  true,
		Cancelled: false,
		Duration:  time.Hour * 168,
	},
	PERCENTAGE: Sale{
		sale:      percentage,
		Available: false,
		Started:   false,
		Finished:  false,
		Cancelled: false,
		Duration:  time.Hour * 24,
	},
	AMOUNT: Sale{
		sale:      amount,
		Available: false,
		Started:   false,
		Finished:  false,
		Cancelled: false,
		Duration:  time.Hour * 48,
	},
	GIVEAWAY: Sale{
		sale:      giveaway,
		Available: true,
		Started:   true,
		Finished:  false,
		Cancelled: false,
		Duration:  time.Hour * 0.5,
	},
}

// invalidSale is an invalid sentinel value for Sale
var invalidSale = Sale{}

// allSlice returns a slice of all enum values.
// This method is useful for iterating over all enum values in a loop.
func (s salesContainer) allSlice() []Sale {
	return []Sale{
		Sales.SALES,
		Sales.PERCENTAGE,
		Sales.AMOUNT,
		Sales.GIVEAWAY,
	}
}

// All returns an iterator over all enum values.
// This method is useful for iterating over all enum values in a loop.
func (s salesContainer) All() iter.Seq[Sale] {
	return func(yield func(Sale) bool) {
		for _, v := range s.allSlice() {
			if !yield(v) {
				return
			}
		}
	}
}

// ParseSale parses the input value into an enum value.
// It returns the parsed enum value or an error if the input is invalid.
// It is a convenience function that can be used to parse enum values from
// various input types, such as strings, byte slices, or other enum types.
func ParseSale(input any) (Sale, error) {
	var res = invalidSale
	switch v := input.(type) {
	case Sale:
		return v, nil
	case string:
		res = stringToSale(v)
	case fmt.Stringer:
		res = stringToSale(v.String())
	case []byte:
		res = stringToSale(string(v))
	case int:
		res = numberToSale(v)
	case int8:
		res = numberToSale(v)
	case int16:
		res = numberToSale(v)
	case int32:
		res = numberToSale(v)
	case int64:
		res = numberToSale(v)
	case uint:
		res = numberToSale(v)
	case uint8:
		res = numberToSale(v)
	case uint16:
		res = numberToSale(v)
	case uint32:
		res = numberToSale(v)
	case uint64:
		res = numberToSale(v)
	case float32:
		res = numberToSale(v)
	case float64:
		res = numberToSale(v)
	default:
		return res, fmt.Errorf("invalid type %T", input)
	}
	if res == invalidSale {
		return res, fmt.Errorf("invalid value %v", input)
	}
	return res, nil
}

// salesNameMap is a map of enum values to their Sale representation
// It is used to convert string representations of enum values into their Sale representation.
var salesNameMap = map[string]Sale{}

// stringToSale converts a string representation of an enum value into its Sale representation
// It returns the Sale representation of the enum value if the string is valid
// Otherwise, it returns invalidSale
func stringToSale(s string) Sale {
	if t, ok := salesNameMap[s]; ok {
		return t
	}
	return invalidSale
}

// numberToSale converts a numeric value to a Sale
// It returns the Sale representation of the enum value if the numeric value is valid
// Otherwise, it returns invalidSale
func numberToSale[T constraints.Integer | constraints.Float](num T) Sale {
	f := float64(num)
	if math.Floor(f) != f {
		return invalidSale
	}
	i := int(f)
	if i <= 0 || i > len(Sales.allSlice()) {
		return invalidSale
	}
	return Sales.allSlice()[i-1]
}

// ExhaustiveSales iterates over all enum values and calls the provided function for each value.
// This function is useful for performing operations on all valid enum values in a loop.
func ExhaustiveSales(f func(Sale)) {
	for _, p := range Sales.allSlice() {
		f(p)
	}
}

// validSales is a map of enum values to their validity
var validSales = map[Sale]bool{
	Sales.SALES:      true,
	Sales.PERCENTAGE: true,
	Sales.AMOUNT:     true,
	Sales.GIVEAWAY:   true,
}

// IsValid checks whether the Sales value is valid.
// A valid value is one that is defined in the original enum and not marked as invalid.
func (p Sale) IsValid() bool {
	return validSales[p]
}

// MarshalJSON implements the json.Marshaler interface for Sale.
// It returns the JSON representation of the enum value as a byte slice.
func (p Sale) MarshalJSON() ([]byte, error) {
	return []byte("\"" + p.String() + "\""), nil
}

// UnmarshalJSON implements the json.Unmarshaler interface for Sale.
// It parses the JSON representation of the enum value from the byte slice.
// It returns an error if the input is not a valid JSON representation.
func (p *Sale) UnmarshalJSON(b []byte) error {
	b = bytes.Trim(bytes.Trim(b, "\""), "\"")
	newp, err := ParseSale(b)
	if err != nil {
		return err
	}
	*p = newp
	return nil
}

// MarshalText implements the encoding.TextMarshaler interface for Sale.
// It returns the string representation of the enum value as a byte slice
func (p Sale) MarshalText() ([]byte, error) {
	return []byte("\"" + p.String() + "\""), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for Sale.
// It parses the string representation of the enum value from the byte slice.
// It returns an error if the byte slice does not contain a valid enum value.
func (p *Sale) UnmarshalText(b []byte) error {
	newp, err := ParseSale(b)
	if err != nil {
		return err
	}
	*p = newp
	return nil
}

// Scan implements the database/sql.Scanner interface for Sale.
// It parses the string representation of the enum value from the database row.
// It returns an error if the row does not contain a valid enum value.
func (p *Sale) Scan(value any) error {
	newp, err := ParseSale(value)
	if err != nil {
		return err
	}
	*p = newp
	return nil
}

// Value implements the database/sql/driver.Valuer interface for Sale.
// It returns the string representation of the enum value.
func (p Sale) Value() (driver.Value, error) {
	return p.String(), nil
}

// MarshalBinary implements the encoding.BinaryMarshaler interface for Sale.
// It returns the binary representation of the enum value as a byte slice.
func (p Sale) MarshalBinary() ([]byte, error) {
	return []byte("\"" + p.String() + "\""), nil
}

// UnmarshalBinary implements the encoding.BinaryUnmarshaler interface for Sale.
// It parses the binary representation of the enum value from the byte slice.
// It returns an error if the byte slice does not contain a valid enum value.
func (p *Sale) UnmarshalBinary(b []byte) error {
	newp, err := ParseSale(b)
	if err != nil {
		return err
	}
	*p = newp
	return nil
}

// MarshalYAML implements the yaml.Marshaler interface for Sale.
// It returns the string representation of the enum value.
// It returns an error if the enum value is invalid.
func (p Sale) MarshalYAML() (any, error) {
	return p.String(), nil
}

// UnmarshalYAML implements the yaml.Unmarshaler interface for Sale.
// It parses the string representation of the enum value from the YAML node.
// It returns an error if the YAML node does not contain a valid enum value.
func (p *Sale) UnmarshalYAML(ctx context.Context, f func(any) error) error {
	select {
	case <-ctx.Done():
		return ctx.Err()
	default:
	}
	return f(p.String())
}

// saleNames is a constant string slice containing all enum values cononical absolute names
const saleNames = "salespercentageamountgiveaway"

// saleNamesMap is a map of enum values to their canonical absolute
// name positions within the saleNames string slice
var saleNamesMap = map[Sale]string{
	Sales.SALES:      saleNames[0:5],
	Sales.PERCENTAGE: saleNames[5:15],
	Sales.AMOUNT:     saleNames[15:21],
	Sales.GIVEAWAY:   saleNames[21:29],
}

// String implements the Stringer interface.
// It returns the canonical absolute name of the enum value.
func (p Sale) String() string {
	if str, ok := saleNamesMap[p]; ok {
		return str
	}
	return fmt.Sprintf("sale(%d)", p.sale)
}

// Compile-time check that all enum values are valid.
// This function is used to ensure that all enum values are defined and valid.
// It is called by the compiler to verify that the enum values are valid.
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the goenums command to generate them again.
	// Does not identify newly added constant values unless order changes
	var x [4]struct{}
	_ = x[sales-1]
	_ = x[percentage-2]
	_ = x[amount-3]
	_ = x[giveaway-4]
}
