// DO NOT EDIT.
// code generated by goenums 'v0.3.8' at 2025-05-04 00:40:37.
// github.com/zarldev/goenums
//
// using the command:
//
// goenums -f sale.go

package sale

import (
	"bytes"
	"database/sql/driver"
	"fmt"
	"iter"
	"strconv"
	"time"
)

type Sale struct {
	sale
	Available bool
	Started   bool
	Finished  bool
	Cancelled bool
	Duration  time.Duration
}

type salesContainer struct {
	SALES      Sale
	PERCENTAGE Sale
	AMOUNT     Sale
	GIVEAWAY   Sale
}

var Sales = salesContainer{
	SALES: Sale{
		sale:      sales,
		Available: false,
		Started:   true,
		Finished:  true,
		Cancelled: false,
		Duration:  time.Hour * 168,
	},
	PERCENTAGE: Sale{
		sale:      percentage,
		Available: false,
		Started:   false,
		Finished:  false,
		Cancelled: false,
		Duration:  time.Hour * 24,
	},
	AMOUNT: Sale{
		sale:      amount,
		Available: false,
		Started:   false,
		Finished:  false,
		Cancelled: false,
		Duration:  time.Hour * 48,
	},
	GIVEAWAY: Sale{
		sale:      giveaway,
		Available: true,
		Started:   true,
		Finished:  false,
		Cancelled: false,
		Duration:  time.Minute * 30,
	},
}

// invalidSale represents an invalid or undefined Sale value.
// It is used as a default return value for failed parsing or conversion operations.
var invalidSale = Sale{}

// allSlice is an internal method that returns all valid Sale values as a slice.
func (c salesContainer) allSlice() []Sale {
	return []Sale{
		c.SALES,
		c.PERCENTAGE,
		c.AMOUNT,
		c.GIVEAWAY,
	}
}

// AllSlice returns all valid Sale values as a slice.
func (c salesContainer) AllSlice() []Sale {
	return c.allSlice()
}

// All returns all valid Sale values.
// In Go 1.23+, this can be used with range-over-function iteration:
// ```
//
//	for v := range Sales.All() {
//	    // process each enum value
//	}
//
// ```
func (c salesContainer) All() iter.Seq[Sale] {
	return func(yield func(Sale) bool) {
		for _, v := range c.allSlice() {
			if !yield(v) {
				return
			}
		}
	}
}

// ParseSale converts various input types to a Sale value.
// It accepts the following types:
// - Sale: returns the value directly
// - string: parses the string representation
// - []byte: converts to string and parses
// - fmt.Stringer: uses the String() result for parsing
// - int/int32/int64: converts the integer to the corresponding enum value
//
// If the input cannot be converted to a valid Sale value, it returns
// the invalidSale value and an error.
func ParseSale(a any) (Sale, error) {
	res := invalidSale
	switch v := a.(type) {
	case Sale:
		return v, nil
	case []byte:
		res = stringToSale(string(v))
	case string:
		res = stringToSale(v)
	case fmt.Stringer:
		res = stringToSale(v.String())
	case int:
		res = intToSale(v)
	case int64:
		res = intToSale(int(v))
	case int32:
		res = intToSale(int(v))
	}
	if res == invalidSale {
		return res, fmt.Errorf("failed to parse Sale value - invalid input: %v", a)
	}
	return res, nil
}

// stringToSale is an internal function that converts a string to a Sale value.
// It uses a predefined mapping of string representations to enum values.
var (
	salesNameMap = map[string]Sale{
		"sales":      Sales.SALES,      // primary alias
		"percentage": Sales.PERCENTAGE, // primary alias
		"amount":     Sales.AMOUNT,     // primary alias
		"giveaway":   Sales.GIVEAWAY,   // primary alias
	}
)

func stringToSale(s string) Sale {
	if v, ok := salesNameMap[s]; ok {
		return v
	}
	return invalidSale
}

// intToSale converts an integer to a Sale value.
// The integer is treated as the ordinal position in the enum sequence.
// The input is adjusted by -5 to account for the enum starting value.
// If the integer doesn't correspond to a valid enum value, invalidSale is returned.
func intToSale(i int) Sale {
	i -= 5
	if i < 0 || i >= len(Sales.allSlice()) {
		return invalidSale
	}
	return Sales.allSlice()[i]
}

// ExhaustiveSales calls the provided function once for each valid Sales value.
// This is useful for switch statement exhaustiveness checking and for processing all enum values.
// Example usage:
// ```
//
//	ExhaustiveSales(func(x Sale) {
//	    switch x {
//	    case Sales.Giveaway:
//	        // handle Giveaway
//	    }
//	})
//
// ```
func ExhaustiveSales(f func(Sale)) {
	for _, p := range Sales.allSlice() {
		f(p)
	}
}

// validSales is a map of valid Sale values.
var validSales = map[Sale]bool{
	Sales.SALES:      true,
	Sales.PERCENTAGE: true,
	Sales.AMOUNT:     true,
	Sales.GIVEAWAY:   true,
}

// IsValid checks whether the Sale value is valid.
// A valid value is one that is defined in the original enum and not marked as invalid.
func (p Sale) IsValid() bool {
	return validSales[p]
}

// MarshalJSON implements the json.Marshaler interface for Sale.
// The enum value is encoded as its string representation.
func (p Sale) MarshalJSON() ([]byte, error) {
	return []byte(`"` + p.String() + `"`), nil
}

// UnmarshalJSON implements the json.Unmarshaler interface for Sale.
// It supports unmarshaling from a string representation of the enum.
func (p *Sale) UnmarshalJSON(b []byte) error {
	b = bytes.Trim(bytes.Trim(b, `"`), ` `)
	newp, err := ParseSale(b)
	if err != nil {
		return err
	}
	*p = newp
	return nil
}

// Scan implements the sql.Scanner interface for Sale.
// This allows Sale values to be scanned directly from database queries.
// It supports scanning from strings, []byte, or integers.
func (p *Sale) Scan(value any) error {
	newp, err := ParseSale(value)
	if err != nil {
		return err
	}
	*p = newp
	return nil
}

// Value implements the driver.Valuer interface for Sale.
// This allows Sale values to be saved to databases.
// The value is stored as a string representation of the enum.
func (p Sale) Value() (driver.Value, error) {
	return p.String(), nil
}

// MarshalBinary implements the encoding.BinaryMarshaler interface for Sale.
// It encodes the enum value as a byte slice.
func (p Sale) MarshalBinary() ([]byte, error) {
	return []byte(p.String()), nil
}

// UnmarshalBinary implements the encoding.BinaryUnmarshaler interface for Sale.
// It decodes the enum value from a byte slice.
func (p *Sale) UnmarshalBinary(b []byte) error {
	newp, err := ParseSale(b)
	if err != nil {
		return err
	}
	*p = newp
	return nil
}

// MarshalText implements the encoding.TextMarshaler interface for Sale.
// The enum value is encoded as its string representation.
func (p Sale) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for Sale.
// It supports unmarshaling from a string representation of the enum.
func (p *Sale) UnmarshalText(b []byte) error {
	newp, err := ParseSale(b)
	if err != nil {
		return err
	}
	*p = newp
	return nil
}

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the goenums command to generate them again.
	// Does not identify newly added constant values unless order changes
	var x [1]struct{}
	_ = x[sales-1]
	_ = x[percentage-2]
	_ = x[amount-3]
	_ = x[giveaway-4]
}

const salesName = "salespercentageamountgiveaway"

var salesIdx = [...]uint16{0, 5, 15, 21, 29}

// String returns the string representation of the Sale value.
// For valid values, it returns the name of the constant.
// For invalid values, it returns a string in the format "sales(N)",
// where N is the numeric value.
func (i sale) String() string {
	if i < 1 || i > sale(len(salesIdx)-1)+0 {
		return "sales(" + (strconv.FormatInt(int64(i), 10) + ")")
	}
	index := int(i) - 1
	return salesName[salesIdx[index]:salesIdx[index+1]]
}
