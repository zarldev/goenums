// DO NOT EDIT.
// code generated by goenums 'v0.3.8' at 2025-05-03 02:52:54.
// github.com/zarldev/goenums
//
// using the command:
//
// goenums skipvalues.go

package skipvalues

import (
	"bytes"
	"database/sql/driver"
	"fmt"
	"iter"
	"strconv"
)

type Version struct {
	version
}

type versionsContainer struct {
	V1 Version
	V3 Version
	V4 Version
	V7 Version
}

var Versions = versionsContainer{
	V1: Version{
		version: V1,
	},
	V3: Version{
		version: V3,
	},
	V4: Version{
		version: V4,
	},
	V7: Version{
		version: V7,
	},
}

// invalidVersion represents an invalid or undefined Version value.
// It is used as a default return value for failed parsing or conversion operations.
var invalidVersion = Version{}

// allSlice is an internal method that returns all valid Version values as a slice.
func (c versionsContainer) allSlice() []Version {
	return []Version{
		c.V1,
		c.V3,
		c.V4,
		c.V7,
	}
}

// AllSlice returns all valid Version values as a slice.
func (c versionsContainer) AllSlice() []Version {
	return c.allSlice()
}

// All returns all valid Version values.
// In Go 1.23+, this can be used with range-over-function iteration:
// ```
//
//	for v := range Versions.All() {
//	    // process each enum value
//	}
//
// ```
func (c versionsContainer) All() iter.Seq[Version] {
	return func(yield func(Version) bool) {
		for _, v := range c.allSlice() {
			if !yield(v) {
				return
			}
		}
	}
}

// ParseVersion converts various input types to a Version value.
// It accepts the following types:
// - Version: returns the value directly
// - string: parses the string representation
// - []byte: converts to string and parses
// - fmt.Stringer: uses the String() result for parsing
// - int/int32/int64: converts the integer to the corresponding enum value
//
// If the input cannot be converted to a valid Version value, it returns
// the invalidVersion value without an error.
func ParseVersion(a any) (Version, error) {
	res := invalidVersion
	switch v := a.(type) {
	case Version:
		return v, nil
	case []byte:
		res = stringToVersion(string(v))
	case string:
		res = stringToVersion(v)
	case fmt.Stringer:
		res = stringToVersion(v.String())
	case int:
		res = intToVersion(v)
	case int64:
		res = intToVersion(int(v))
	case int32:
		res = intToVersion(int(v))
	}
	return res, nil
}

// stringToVersion is an internal function that converts a string to a Version value.
// It uses a predefined mapping of string representations to enum values.
var (
	versionsNameMap = map[string]Version{
		"V1": Versions.V1, // primary alias
		"V3": Versions.V3, // primary alias
		"V4": Versions.V4, // primary alias
		"V7": Versions.V7, // primary alias
	}
)

func stringToVersion(s string) Version {
	if v, ok := versionsNameMap[s]; ok {
		return v
	}
	return invalidVersion
}

// intToVersion converts an integer to a Version value.
// The integer is treated as the ordinal position in the enum sequence.
// The input is adjusted by -8 to account for the enum starting value.
// If the integer doesn't correspond to a valid enum value, invalidVersion is returned.
func intToVersion(i int) Version {
	i -= 8
	if i < 0 || i >= len(Versions.allSlice()) {
		return invalidVersion
	}
	return Versions.allSlice()[i]
}

// ExhaustiveVersions calls the provided function once for each valid Versions value.
// This is useful for switch statement exhaustiveness checking and for processing all enum values.
// Example usage:
// ```
//
//	ExhaustiveVersions(func(x Version) {
//	    switch x {
//	    case Versions.V7:
//	        // handle V7
//	    }
//	})
//
// ```
func ExhaustiveVersions(f func(Version)) {
	for _, p := range Versions.allSlice() {
		f(p)
	}
}

// validVersions is a map of valid Version values.
var validVersions = map[Version]bool{
	Versions.V1: true,
	Versions.V3: true,
	Versions.V4: true,
	Versions.V7: true,
}

// IsValid checks whether the Version value is valid.
// A valid value is one that is defined in the original enum and not marked as invalid.
func (p Version) IsValid() bool {
	return validVersions[p]
}

// MarshalJSON implements the json.Marshaler interface for Version.
// The enum value is encoded as its string representation.
func (p Version) MarshalJSON() ([]byte, error) {
	return []byte(`"` + p.String() + `"`), nil
}

// UnmarshalJSON implements the json.Unmarshaler interface for Version.
// It supports unmarshaling from a string representation of the enum.
func (p *Version) UnmarshalJSON(b []byte) error {
	b = bytes.Trim(bytes.Trim(b, `"`), ` `)
	newp, err := ParseVersion(b)
	if err != nil {
		return err
	}
	*p = newp
	return nil
}

// Scan implements the sql.Scanner interface for Version.
// This allows Version values to be scanned directly from database queries.
// It supports scanning from strings, []byte, or integers.
func (p *Version) Scan(value any) error {
	newp, err := ParseVersion(value)
	if err != nil {
		return err
	}
	*p = newp
	return nil
}

// Value implements the driver.Valuer interface for Version.
// This allows Version values to be saved to databases.
// The value is stored as a string representation of the enum.
func (p Version) Value() (driver.Value, error) {
	return p.String(), nil
}

// MarshalBinary implements the encoding.BinaryMarshaler interface for Version.
// It encodes the enum value as a byte slice.
func (p Version) MarshalBinary() ([]byte, error) {
	return []byte(p.String()), nil
}

// UnmarshalBinary implements the encoding.BinaryUnmarshaler interface for Version.
// It decodes the enum value from a byte slice.
func (p *Version) UnmarshalBinary(b []byte) error {
	newp, err := ParseVersion(b)
	if err != nil {
		return err
	}
	*p = newp
	return nil
}

// MarshalText implements the encoding.TextMarshaler interface for Version.
// The enum value is encoded as its string representation.
func (p Version) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for Version.
// It supports unmarshaling from a string representation of the enum.
func (p *Version) UnmarshalText(b []byte) error {
	newp, err := ParseVersion(b)
	if err != nil {
		return err
	}
	*p = newp
	return nil
}

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the goenums command to generate them again.
	// Does not identify newly added constant values unless order changes
	var x [1]struct{}
	_ = x[V1-1]
	_ = x[V3-3]
	_ = x[V4-4]
	_ = x[V7-7]
}

const versionsName = "V1V3V4V7"

var versionsIdx = [...]uint16{0, 2, 4, 6, 8}

// String returns the string representation of the Version value.
// For valid values, it returns the name of the constant.
// For invalid values, it returns a string in the format "versions(N)",
// where N is the numeric value.
func (i version) String() string {
	if i < 1 || i > version(len(versionsIdx)-1)+0 {
		return "versions(" + (strconv.FormatInt(int64(i), 10) + ")")
	}
	index := int(i) - 1
	return versionsName[versionsIdx[index]:versionsIdx[index+1]]
}
