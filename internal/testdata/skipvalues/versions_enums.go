// DO NOT EDIT.
// code generated by goenums 'v0.4.2' at Jun 30 01:30:48.
//
// github.com/zarldev/goenums
//
// using the command:
// goenums -f skipvalues.go

package skipvalues

import (
	"bytes"
	"database/sql/driver"
	"errors"
	"fmt"
	"iter"
	"math"

	"golang.org/x/exp/constraints"
)

// Version is a type that represents a single enum value.
// It combines the core information about the enum constant and it's defined fields.
type Version struct {
	version
}

// versionsContainer is the container for all enum values.
// It is private and should not be used directly use the public methods on the Version type.
type versionsContainer struct {
	V1 Version
	V3 Version
	V4 Version
	V7 Version
}

// Versions is a main entry point using the Version type.
// It it a container for all enum values and provides a convenient way to access all enum values and perform
// operations, with convenience methods for common use cases.
var Versions = versionsContainer{
	V1: Version{
		version: V1,
	},
	V3: Version{
		version: V3,
	},
	V4: Version{
		version: V4,
	},
	V7: Version{
		version: V7,
	},
}

// invalidVersion is an invalid sentinel value for Version
var invalidVersion = Version{
	version: -1,
}

// allSlice returns a slice of all enum values.
// This method is useful for iterating over all enum values in a loop.
func (v versionsContainer) allSlice() []Version {
	return []Version{
		Versions.V1,
		Versions.V3,
		Versions.V4,
		Versions.V7,
	}
}

// All returns an iterator over all enum values.
// This method is useful for iterating over all enum values in a loop.
func (v versionsContainer) All() iter.Seq[Version] {
	return func(yield func(Version) bool) {
		for _, v := range v.allSlice() {
			if !yield(v) {
				return
			}
		}
	}
}

var ErrParseVersion = errors.New("invalid input provided to parse to Version")

// ParseVersion parses the input value into an enum value.
// It returns the parsed enum value or an error if the input is invalid.
// It is a convenience function that can be used to parse enum values from
// various input types, such as strings, byte slices, or other enum types.
func ParseVersion(input any) (Version, error) {
	switch v := input.(type) {
	case Version:
		return v, nil
	case string:
		if result := stringToVersion(v); result != nil {
			return *result, nil
		}
	case fmt.Stringer:
		if result := stringToVersion(v.String()); result != nil {
			return *result, nil
		}
	case []byte:
		if result := stringToVersion(string(v)); result != nil {
			return *result, nil
		}
	case int:
		if result := numberToVersion(v); result != nil {
			return *result, nil
		}
	case int8:
		if result := numberToVersion(v); result != nil {
			return *result, nil
		}
	case int16:
		if result := numberToVersion(v); result != nil {
			return *result, nil
		}
	case int32:
		if result := numberToVersion(v); result != nil {
			return *result, nil
		}
	case int64:
		if result := numberToVersion(v); result != nil {
			return *result, nil
		}
	case uint:
		if result := numberToVersion(v); result != nil {
			return *result, nil
		}
	case uint8:
		if result := numberToVersion(v); result != nil {
			return *result, nil
		}
	case uint16:
		if result := numberToVersion(v); result != nil {
			return *result, nil
		}
	case uint32:
		if result := numberToVersion(v); result != nil {
			return *result, nil
		}
	case uint64:
		if result := numberToVersion(v); result != nil {
			return *result, nil
		}
	case float32:
		if result := numberToVersion(v); result != nil {
			return *result, nil
		}
	case float64:
		if result := numberToVersion(v); result != nil {
			return *result, nil
		}
	default:
		return invalidVersion, fmt.Errorf("invalid type %T", input)
	}
	return invalidVersion, fmt.Errorf("%w: invalid value %v", ErrParseVersion, input)
}

// versionsNameMap is a map of enum values to their Version representation
// It is used to convert string representations of enum values into their Version representation.
var versionsNameMap = map[string]Version{
	"V1": Versions.V1,
	"V3": Versions.V3,
	"V4": Versions.V4,
	"V7": Versions.V7,
}

// stringToVersion converts a string representation of an enum value into its Version representation
// It returns a pointer to the Version representation of the enum value if the string is valid
// Otherwise, it returns nil
func stringToVersion(s string) *Version {
	if t, ok := versionsNameMap[s]; ok {
		return &t
	}
	return nil
}

// numberToVersion converts a numeric value to a Version
// It returns a pointer to the Version representation of the enum value if the numeric value is valid
// Otherwise, it returns nil
func numberToVersion[T constraints.Integer | constraints.Float](num T) *Version {
	f := float64(num)
	if math.Floor(f) != f {
		return nil
	}
	i := int(f)
	if i <= 0 || i > len(Versions.allSlice()) {
		return nil
	}
	result := Versions.allSlice()[i-1]
	if !result.IsValid() {
		return nil
	}
	return &result
}

// ExhaustiveVersions iterates over all enum values and calls the provided function for each value.
// This function is useful for performing operations on all valid enum values in a loop.
func ExhaustiveVersions(f func(Version)) {
	for _, p := range Versions.allSlice() {
		f(p)
	}
}

// validVersions is a map of enum values to their validity
var validVersions = map[Version]bool{
	Versions.V1: true,
	Versions.V3: true,
	Versions.V4: true,
	Versions.V7: true,
}

// IsValid checks whether the Versions value is valid.
// A valid value is one that is defined in the original enum and not marked as invalid.
func (v Version) IsValid() bool {
	return validVersions[v]
}

// MarshalJSON implements the json.Marshaler interface for Version.
// It returns the JSON representation of the enum value as a byte slice.
func (v Version) MarshalJSON() ([]byte, error) {
	return []byte("\"" + v.String() + "\""), nil
}

// UnmarshalJSON implements the json.Unmarshaler interface for Version.
// It parses the JSON representation of the enum value from the byte slice.
// It returns an error if the input is not a valid JSON representation.
func (v *Version) UnmarshalJSON(b []byte) error {
	b = bytes.Trim(bytes.Trim(b, "\""), "\"")
	newv, err := ParseVersion(b)
	if err != nil {
		return err
	}
	*v = newv
	return nil
}

// MarshalText implements the encoding.TextMarshaler interface for Version.
// It returns the string representation of the enum value as a byte slice
func (v Version) MarshalText() ([]byte, error) {
	return []byte("\"" + v.String() + "\""), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for Version.
// It parses the string representation of the enum value from the byte slice.
// It returns an error if the byte slice does not contain a valid enum value.
func (v *Version) UnmarshalText(b []byte) error {
	newv, err := ParseVersion(b)
	if err != nil {
		return err
	}
	*v = newv
	return nil
}

// Scan implements the database/sql.Scanner interface for Version.
// It parses the string representation of the enum value from the database row.
// It returns an error if the row does not contain a valid enum value.
func (v *Version) Scan(value any) error {
	newv, err := ParseVersion(value)
	if err != nil {
		return err
	}
	*v = newv
	return nil
}

// Value implements the database/sql/driver.Valuer interface for Version.
// It returns the string representation of the enum value.
func (v Version) Value() (driver.Value, error) {
	return v.String(), nil
}

// MarshalBinary implements the encoding.BinaryMarshaler interface for Version.
// It returns the binary representation of the enum value as a byte slice.
func (v Version) MarshalBinary() ([]byte, error) {
	return []byte("\"" + v.String() + "\""), nil
}

// UnmarshalBinary implements the encoding.BinaryUnmarshaler interface for Version.
// It parses the binary representation of the enum value from the byte slice.
// It returns an error if the byte slice does not contain a valid enum value.
func (v *Version) UnmarshalBinary(b []byte) error {
	newv, err := ParseVersion(b)
	if err != nil {
		return err
	}
	*v = newv
	return nil
}

// MarshalYAML implements the yaml.Marshaler interface for Version.
// It returns the string representation of the enum value.
func (v Version) MarshalYAML() ([]byte, error) {
	return []byte(v.String()), nil
}

// UnmarshalYAML implements the yaml.Unmarshaler interface for Planet.
// It parses the byte slice representation of the enum value and returns an error
// if the YAML byte slice does not contain a valid enum value.
func (v *Version) UnmarshalYAML(b []byte) error {
	newv, err := ParseVersion(b)
	if err != nil {
		return err
	}
	*v = newv
	return nil
}

// versionNames is a constant string slice containing all enum values cononical absolute names
const versionNames = "V1V3V4V7"

// versionNamesMap is a map of enum values to their canonical absolute
// name positions within the versionNames string slice
var versionNamesMap = map[Version]string{
	Versions.V1: versionNames[0:2],
	Versions.V3: versionNames[2:4],
	Versions.V4: versionNames[4:6],
	Versions.V7: versionNames[6:8],
}

// String implements the Stringer interface.
// It returns the canonical absolute name of the enum value.
func (v Version) String() string {
	if str, ok := versionNamesMap[v]; ok {
		return str
	}
	return fmt.Sprintf("version(%d)", v.version)
}

// Compile-time check that all enum values are valid.
// This function is used to ensure that all enum values are defined and valid.
// It is called by the compiler to verify that the enum values are valid.
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the goenums command to generate them again.
	// Does not identify newly added constant values unless order changes
	var x [8]struct{}
	_ = x[V1-1]
	_ = x[V3-3]
	_ = x[V4-4]
	_ = x[V7-7]
}
