// Code generated by goenums v0.3.6 at 2025-04-17T23:12:38+01:00. DO NOT EDIT.
// This file was generated by github.com/zarldev/goenums
// using the command:
// goenums ../internal/testdata/spaces/tickets.go

package spaces

import (
	"bytes"
	"database/sql/driver"
	"fmt"
	"iter"
	"strconv"
)

type Ticketstatus struct {
	ticketStatus
}

type ticketstatusesContainer struct {
	UNKNOWN   Ticketstatus
	PENDING   Ticketstatus
	APPROVED  Ticketstatus
	REJECTED  Ticketstatus
	COMPLETED Ticketstatus
}

var Ticketstatuses = ticketstatusesContainer{
	PENDING: Ticketstatus{
		ticketStatus: pending,
	},
	APPROVED: Ticketstatus{
		ticketStatus: approved,
	},
	REJECTED: Ticketstatus{
		ticketStatus: rejected,
	},
	COMPLETED: Ticketstatus{
		ticketStatus: completed,
	},
}

// invalidTicketstatus represents an invalid or undefined Ticketstatus value.
// It is used as a default return value for failed parsing or conversion operations.
var invalidTicketstatus = Ticketstatus{}

// allSlice is an internal method that returns all valid Ticketstatus values as a slice.
func (c ticketstatusesContainer) allSlice() []Ticketstatus {
	return []Ticketstatus{
		c.PENDING,
		c.APPROVED,
		c.REJECTED,
		c.COMPLETED,
	}
}

// AllSlice returns all valid Ticketstatus values as a slice.
// Deprecated: Use All() with Go 1.23+ range over function types instead.
func (c ticketstatusesContainer) AllSlice() []Ticketstatus {
	return c.allSlice()
}

// All returns all valid Ticketstatus values.
// In Go 1.23+, this can be used with range-over-function iteration:
// ```
//
//	for v := range Ticketstatuses.All() {
//	    // process each enum value
//	}
//
// ```
func (c ticketstatusesContainer) All() iter.Seq[Ticketstatus] {
	return func(yield func(Ticketstatus) bool) {
		for _, v := range c.allSlice() {
			if !yield(v) {
				return
			}
		}
	}
}

// ParseTicketstatus converts various input types to a Ticketstatus value.
// It accepts the following types:
// - Ticketstatus: returns the value directly
// - string: parses the string representation
// - []byte: converts to string and parses
// - fmt.Stringer: uses the String() result for parsing
// - int/int32/int64: converts the integer to the corresponding enum value
//
// If the input cannot be converted to a valid Ticketstatus value, it returns
// the invalidTicketstatus value without an error.
func ParseTicketstatus(a any) (Ticketstatus, error) {
	res := invalidTicketstatus
	switch v := a.(type) {
	case Ticketstatus:
		return v, nil
	case []byte:
		res = stringToTicketstatus(string(v))
	case string:
		res = stringToTicketstatus(v)
	case fmt.Stringer:
		res = stringToTicketstatus(v.String())
	case int:
		res = intToTicketstatus(v)
	case int64:
		res = intToTicketstatus(int(v))
	case int32:
		res = intToTicketstatus(int(v))
	}
	return res, nil
}

// stringToTicketstatus is an internal function that converts a string to a Ticketstatus value.
// It uses a predefined mapping of string representations to enum values.
var (
	_ticketstatusesNameMap = map[string]Ticketstatus{
		"unknown":                Ticketstatuses.UNKNOWN,
		"In Progress":            Ticketstatuses.PENDING,
		"Fully Approved":         Ticketstatuses.APPROVED,
		"Has Been Rejected":      Ticketstatuses.REJECTED,
		"Successfully Completed": Ticketstatuses.COMPLETED,
	}
)

func stringToTicketstatus(s string) Ticketstatus {
	if v, ok := _ticketstatusesNameMap[s]; ok {
		return v
	}
	return invalidTicketstatus
}

// intToTicketstatus converts an integer to a Ticketstatus value.
// The integer is treated as the ordinal position in the enum sequence.
// If the integer doesn't correspond to a valid enum value, invalidTicketstatus is returned.
func intToTicketstatus(i int) Ticketstatus {
	if i < 0 || i >= len(Ticketstatuses.allSlice()) {
		return invalidTicketstatus
	}
	return Ticketstatuses.allSlice()[i]
}

// ExhaustiveTicketstatuss calls the provided function once for each valid Ticketstatus value.
// This is useful for switch statement exhaustiveness checking and for processing all enum values.
// Example usage:
// ```
//
//	ExhaustiveTicketstatuss(func(x Ticketstatus) {
//	    switch x {
//	    case Ticketstatuses.VALUE1:
//	        // handle VALUE1
//	    }
//	})
//
// ```
func ExhaustiveTicketstatuss(f func(Ticketstatus)) {
	for _, p := range Ticketstatuses.allSlice() {
		f(p)
	}
}

// validTicketstatuses is a map of valid Ticketstatus values.
var validTicketstatuses = map[Ticketstatus]bool{
	Ticketstatuses.PENDING:   true,
	Ticketstatuses.APPROVED:  true,
	Ticketstatuses.REJECTED:  true,
	Ticketstatuses.COMPLETED: true,
}

// IsValid checks whether the Ticketstatus value is valid.
// A valid value is one that is defined in the original enum and not marked as invalid.
func (p Ticketstatus) IsValid() bool {
	return validTicketstatuses[p]
}

// MarshalJSON implements the json.Marshaler interface for Ticketstatus.
// The enum value is encoded as its string representation.
func (p Ticketstatus) MarshalJSON() ([]byte, error) {
	return []byte(`"` + p.String() + `"`), nil
}

// UnmarshalJSON implements the json.Unmarshaler interface for Ticketstatus.
// It supports unmarshaling from a string representation of the enum.
func (p *Ticketstatus) UnmarshalJSON(b []byte) error {
	b = bytes.Trim(bytes.Trim(b, `"`), ` `)
	newp, err := ParseTicketstatus(b)
	if err != nil {
		return err
	}
	*p = newp
	return nil
}

// Scan implements the sql.Scanner interface for Ticketstatus.
// This allows Ticketstatus values to be scanned directly from database queries.
// It supports scanning from strings, []byte, or integers.
func (p *Ticketstatus) Scan(value any) error {
	newp, err := ParseTicketstatus(value)
	if err != nil {
		return err
	}
	*p = newp
	return nil
}

// Value implements the driver.Valuer interface for Ticketstatus.
// This allows Ticketstatus values to be saved to databases.
// The value is stored as a string representation of the enum.
func (p Ticketstatus) Value() (driver.Value, error) {
	return p.String(), nil
}

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the goenums command to generate them again.
	// Does not identify newly added constant values unless order changes
	var x [1]struct{}
	_ = x[unknown-0]
	_ = x[pending-1]
	_ = x[approved-2]
	_ = x[rejected-3]
	_ = x[completed-4]
}

const _ticketstatuses_name = "unknownIn ProgressFully ApprovedHas Been RejectedSuccessfully Completed"

var _ticketstatuses_index = [...]uint16{0, 7, 18, 32, 49, 71}

// String returns the string representation of the Ticketstatus value.
// For valid values, it returns the name of the constant.
// For invalid values, it returns a string in the format "ticketstatuses(N)",
// where N is the numeric value.
func (i ticketStatus) String() string {
	if i < 0 || i >= ticketStatus(len(_ticketstatuses_index)-1) {
		return "ticketstatuses(" + (strconv.FormatInt(int64(i), 10) + ")")
	}
	return _ticketstatuses_name[_ticketstatuses_index[i]:_ticketstatuses_index[i+1]]
}
