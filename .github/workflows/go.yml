# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: goenums

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  formatting:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: setup go 
      uses: actions/setup-go@v5
      with:
        go-version-file: 'go.mod'
        cache-dependency-path: 'go.sum'
    - name: gofmt check with simplify
      id: gofmt
      run: |
        set +e  # Don't exit on error temporarily
        UNFORMATTED=$(go list -f '{{.Dir}}' ./... | grep -v testdata | xargs -I {} find {} -maxdepth 1 -name '*.go' | xargs gofmt -s -l)
        set -e  # Re-enable exit on error
        if [ -n "$UNFORMATTED" ]; then
          echo "The following files need formatting:"
          echo "$UNFORMATTED"
          exit 1
        else
          echo "âœ… All files are properly formatted"
        fi
  vetting:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: setup go 
      uses: actions/setup-go@v5
      with:
        go-version-file: 'go.mod'
        cache-dependency-path: 'go.sum'
    - name: go vet
      run: go vet -c 5 ./...
    - name: run tests
      run: go test -v --race ./...
    - name: build
      run: go build -v -o goenums goenums.go
  linting:
    needs: [formatting, vetting]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: setup go 
      uses: actions/setup-go@v5
      with:
        go-version-file: 'go.mod'
        cache-dependency-path: 'go.sum'
    - name: golangci-lint
      uses: golangci/golangci-lint-action@v7
  tests-and-coverage:
    needs: [formatting, vetting, linting]
    runs-on: ubuntu-latest
    env:
      CGO_ENABLED: 1
    steps:
    - uses: actions/checkout@v4
    - name: setup go 
      uses: actions/setup-go@v5
      with:
        go-version-file: 'go.mod'
        cache-dependency-path: 'go.sum'
    - name: run tests
      run: go test -v --race ./...
    - name: coverage
      uses: vladopajic/go-test-coverage@v2
      with:
        profile: coverage.out
        local-prefix: github.com/zarldev/goenums
        config-file: ./.testcoverage.yml
    - name: function coverage
      run: go tool cover -func coverage.out
    - name: generate coverage report
      run: go tool cover -html=coverage.out -o coverage.html
    - name: upload coverage report
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: coverage.html
  security-checks:
    needs: [formatting, vetting, linting, tests-and-coverage]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: setup go 
      uses: actions/setup-go@v5
      with:
        go-version-file: 'go.mod'
        cache-dependency-path: 'go.sum'
    - name: gosec
      uses: securego/gosec@master
      with:
        args: ./... 
    - name: govulncheck
      id: govulncheck
      uses: golang/govulncheck-action@v1
    