// code generated by goenums {.Version} at {.Time}. DO NOT EDIT.
//
// github.com/zarldev/goenums
//
// using the command:
// goenums {.Command} {.SourceFilename}

package main

import (
	"bytes"
	"database/sql/driver"
	"fmt"
	"golang.org/x/exp/constraints"
	"iter"
	"math"
)

type SolarsystemPlanet struct {
	solarsystemPlanets
	Gravity             float64
	RadiusKm            float64
	MassKg              float64
	OrbitKm             float64
	OrbitDays           float64
	SurfacePressureBars float64
	Moons               int
	Rings               bool
}

type solarsystemPlanetsContainer struct {
	UNKNOWN SolarsystemPlanet
	MERCURY SolarsystemPlanet
	VENUS   SolarsystemPlanet
	EARTH   SolarsystemPlanet
	MARS    SolarsystemPlanet
	JUPITER SolarsystemPlanet
	SATURN  SolarsystemPlanet
	URANUS  SolarsystemPlanet
	NEPTUNE SolarsystemPlanet
}

var SolarsystemPlanets = solarsystemPlanetsContainer{
	MERCURY: SolarsystemPlanet{
		solarsystemPlanets:  mercury,
		Gravity:             0.378,
		RadiusKm:            2439.7,
		MassKg:              3.30e+23,
		OrbitKm:             5.79e+07,
		OrbitDays:           88,
		SurfacePressureBars: 1.00e-10,
		Moons:               0,
		Rings:               false,
	},
	VENUS: SolarsystemPlanet{
		solarsystemPlanets:  venus,
		Gravity:             0.907,
		RadiusKm:            6051.8,
		MassKg:              4.87e+24,
		OrbitKm:             1.08e+08,
		OrbitDays:           225,
		SurfacePressureBars: 92,
		Moons:               0,
		Rings:               false,
	},
	EARTH: SolarsystemPlanet{
		solarsystemPlanets:  earth,
		Gravity:             1,
		RadiusKm:            6378.1,
		MassKg:              5.97e+24,
		OrbitKm:             1.50e+08,
		OrbitDays:           365,
		SurfacePressureBars: 1,
		Moons:               1,
		Rings:               false,
	},
	MARS: SolarsystemPlanet{
		solarsystemPlanets:  mars,
		Gravity:             0.377,
		RadiusKm:            3389.5,
		MassKg:              6.42e+23,
		OrbitKm:             2.28e+08,
		OrbitDays:           687,
		SurfacePressureBars: 0.01,
		Moons:               2,
		Rings:               false,
	},
	JUPITER: SolarsystemPlanet{
		solarsystemPlanets:  jupiter,
		Gravity:             2.36,
		RadiusKm:            69911,
		MassKg:              1.90e+27,
		OrbitKm:             7.79e+08,
		OrbitDays:           4333,
		SurfacePressureBars: 20,
		Moons:               4,
		Rings:               true,
	},
	SATURN: SolarsystemPlanet{
		solarsystemPlanets:  saturn,
		Gravity:             0.916,
		RadiusKm:            58232,
		MassKg:              5.68e+26,
		OrbitKm:             1.43e+09,
		OrbitDays:           10759,
		SurfacePressureBars: 1,
		Moons:               7,
		Rings:               true,
	},
	URANUS: SolarsystemPlanet{
		solarsystemPlanets:  uranus,
		Gravity:             0.889,
		RadiusKm:            25362,
		MassKg:              8.68e+25,
		OrbitKm:             2.87e+09,
		OrbitDays:           30687,
		SurfacePressureBars: 1.3,
		Moons:               13,
		Rings:               true,
	},
	NEPTUNE: SolarsystemPlanet{
		solarsystemPlanets:  neptune,
		Gravity:             1.12,
		RadiusKm:            24622,
		MassKg:              1.02e+26,
		OrbitKm:             4.50e+09,
		OrbitDays:           60190,
		SurfacePressureBars: 1.5,
		Moons:               2,
		Rings:               true,
	},
}

var invalidSolarsystemPlanet = SolarsystemPlanet{}

func (s solarsystemPlanetsContainer) allSlice() []SolarsystemPlanet {
	return []SolarsystemPlanet{
		SolarsystemPlanets.MERCURY,
		SolarsystemPlanets.VENUS,
		SolarsystemPlanets.EARTH,
		SolarsystemPlanets.MARS,
		SolarsystemPlanets.JUPITER,
		SolarsystemPlanets.SATURN,
		SolarsystemPlanets.URANUS,
		SolarsystemPlanets.NEPTUNE,
	}
}
func (s solarsystemPlanetsContainer) All() iter.Seq[SolarsystemPlanet] {
	return func(yield func(SolarsystemPlanet) bool) {
		for _, v := range s.allSlice() {
			if !yield(v) {
				return
			}
		}
	}
}

func ParseSolarsystemPlanet(input any) (SolarsystemPlanet, error) {
	var res = invalidSolarsystemPlanet
	switch v := input.(type) {
	case SolarsystemPlanet:
		return v, nil
	case string:
		res = stringToSolarsystemPlanet(v)
	case fmt.Stringer:
		res = stringToSolarsystemPlanet(v.String())
	case []byte:
		res = stringToSolarsystemPlanet(string(v))
	case int:
		res = numberToSolarsystemPlanet(v)
	case int8:
		res = numberToSolarsystemPlanet(v)
	case int16:
		res = numberToSolarsystemPlanet(v)
	case int32:
		res = numberToSolarsystemPlanet(v)
	case int64:
		res = numberToSolarsystemPlanet(v)
	case uint:
		res = numberToSolarsystemPlanet(v)
	case uint8:
		res = numberToSolarsystemPlanet(v)
	case uint16:
		res = numberToSolarsystemPlanet(v)
	case uint32:
		res = numberToSolarsystemPlanet(v)
	case uint64:
		res = numberToSolarsystemPlanet(v)
	case float32:
		res = numberToSolarsystemPlanet(v)
	case float64:
		res = numberToSolarsystemPlanet(v)
	default:
		return res, fmt.Errorf("invalid type %T", input)
	}
	if res == invalidSolarsystemPlanet {
		return res, fmt.Errorf("invalid value %v", input)
	}
	return res, nil
}

var solarsystemPlanetsNameMap = map[string]SolarsystemPlanet{
	"Mercury":     SolarsystemPlanets.MERCURY,
	"warmone":     SolarsystemPlanets.MERCURY,
	"Venus":       SolarsystemPlanets.VENUS,
	"verywarmone": SolarsystemPlanets.VENUS,
	"Earth":       SolarsystemPlanets.EARTH,
	"chillin":     SolarsystemPlanets.EARTH,
	"Mars":        SolarsystemPlanets.MARS,
	"Jupiter":     SolarsystemPlanets.JUPITER,
	"Saturn":      SolarsystemPlanets.SATURN,
	"Uranus":      SolarsystemPlanets.URANUS,
	"Neptune":     SolarsystemPlanets.NEPTUNE,
}

func stringToSolarsystemPlanet(s string) SolarsystemPlanet {
	if t, ok := solarsystemPlanetsNameMap[s]; ok {
		return t
	}
	return invalidSolarsystemPlanet
}

// ToSolarsystemPlanet converts a numeric value to a SolarsystemPlanet
func numberToSolarsystemPlanet[T constraints.Integer | constraints.Float](num T) SolarsystemPlanet {
	f := float64(num)
	if math.Floor(f) != f {
		return invalidSolarsystemPlanet
	}
	i := int(f)
	if i <= 0 || i > len(SolarsystemPlanets.allSlice()) {
		return invalidSolarsystemPlanet
	}
	return SolarsystemPlanets.allSlice()[i-1]
}

func ExhaustiveSolarsystemPlanets(f func(SolarsystemPlanet)) {
	for _, p := range SolarsystemPlanets.allSlice() {
		f(p)
	}
}

var validSolarsystemPlanets = map[SolarsystemPlanet]bool{
	SolarsystemPlanets.MERCURY: true,
	SolarsystemPlanets.VENUS:   true,
	SolarsystemPlanets.EARTH:   true,
	SolarsystemPlanets.MARS:    true,
	SolarsystemPlanets.JUPITER: true,
	SolarsystemPlanets.SATURN:  true,
	SolarsystemPlanets.URANUS:  true,
	SolarsystemPlanets.NEPTUNE: true,
}

// IsValid checks whether the SolarsystemPlanet value is valid.
// A valid value is one that is defined in the original enum and not marked as invalid.
func (p SolarsystemPlanet) IsValid() bool {
	return validSolarsystemPlanets[p]
}

func (p SolarsystemPlanet) MarshalJSON() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *SolarsystemPlanet) UnmarshalJSON(b []byte) error {
	b = bytes.Trim(bytes.Trim(b, "\""), "\"")
	newp, err := ParseSolarsystemPlanet(b)
	if err != nil {
		return err
	}
	*p = newp
	return nil
}

func (p SolarsystemPlanet) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *SolarsystemPlanet) UnmarshalText(b []byte) error {
	newp, err := ParseSolarsystemPlanet(b)
	if err != nil {
		return err
	}
	*p = newp
	return nil
}

func (p *SolarsystemPlanet) Scan(value any) error {
	newp, err := ParseSolarsystemPlanet(value)
	if err != nil {
		return err
	}
	*p = newp
	return nil
}

func (p SolarsystemPlanet) Value() (driver.Value, error) {
	return p.String(), nil
}

func (p SolarsystemPlanet) MarshalBinary() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *SolarsystemPlanet) UnmarshalBinary(b []byte) error {
	newp, err := ParseSolarsystemPlanet(b)
	if err != nil {
		return err
	}
	*p = newp
	return nil
}

const solarsystemplanetsNames = "MercuryVenusEarthMarsJupiterSaturnUranusNeptune"

var solarsystemplanetsNamesMap = map[SolarsystemPlanet]string{
	SolarsystemPlanets.MERCURY: solarsystemplanetsNames[0:7],
	SolarsystemPlanets.VENUS:   solarsystemplanetsNames[7:12],
	SolarsystemPlanets.EARTH:   solarsystemplanetsNames[12:17],
	SolarsystemPlanets.MARS:    solarsystemplanetsNames[17:21],
	SolarsystemPlanets.JUPITER: solarsystemplanetsNames[21:28],
	SolarsystemPlanets.SATURN:  solarsystemplanetsNames[28:34],
	SolarsystemPlanets.URANUS:  solarsystemplanetsNames[34:40],
	SolarsystemPlanets.NEPTUNE: solarsystemplanetsNames[40:47],
}

// String implements the Stringer interface.
func (p SolarsystemPlanet) String() string {
	if str, ok := solarsystemplanetsNamesMap[p]; ok {
		return str
	}
	return fmt.Sprintf("solarsystemplanets(%d)", p.solarsystemPlanets)
}

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the goenums command to generate them again.
	// Does not identify newly added constant values unless order changes
	var x [9]struct{}
	_ = x[unknown-1]
	_ = x[mercury-2]
	_ = x[venus-3]
	_ = x[earth-4]
	_ = x[mars-5]
	_ = x[jupiter-6]
	_ = x[saturn-7]
	_ = x[uranus-8]
	_ = x[neptune-9]
}
