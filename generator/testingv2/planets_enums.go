
// DO NOT EDIT.
// code generated by goenums {.Version} at {.Time}.
// github.com/zarldev/goenums
//
// using the command:
// goenums {.Command} {.SourceFilename}
	
package main

import (
"fmt"
"strconv"
"bytes"
"database/sql/driver"
"math"
"strings"
"iter"
)

type Planet struct {
  planet
  Gravity float64
  RadiusKm float64
  MassKg float64
  OrbitKm float64
  OrbitDays float64
  SurfacePressureBars float64
  Moons int
  Rings bool
}

type planetsContainer struct {
  UNKNOWN Planet
  MERCURY Planet
  VENUS Planet
  EARTH Planet
  MARS Planet
  JUPITER Planet
  SATURN Planet
  URANUS Planet
  NEPTUNE Planet
}

var Planets = planetsContainer{
	MERCURY: Planet {
		planet: mercury,
		Gravity: 0.378,
		RadiusKm: 2439.7,
		MassKg: 3.30e+23,
		OrbitKm: 5.79e+07,
		OrbitDays: 88,
		SurfacePressureBars: 1.00e-10,
		Moons: 0,
		Rings: false,
	},
	VENUS: Planet {
		planet: venus,
		Gravity: 0.907,
		RadiusKm: 6051.8,
		MassKg: 4.87e+24,
		OrbitKm: 1.08e+08,
		OrbitDays: 225,
		SurfacePressureBars: 92,
		Moons: 0,
		Rings: false,
	},
	EARTH: Planet {
		planet: earth,
		Gravity: 1,
		RadiusKm: 6378.1,
		MassKg: 5.97e+24,
		OrbitKm: 1.50e+08,
		OrbitDays: 365,
		SurfacePressureBars: 1,
		Moons: 1,
		Rings: false,
	},
	MARS: Planet {
		planet: mars,
		Gravity: 0.377,
		RadiusKm: 3389.5,
		MassKg: 6.42e+23,
		OrbitKm: 2.28e+08,
		OrbitDays: 687,
		SurfacePressureBars: 0.01,
		Moons: 2,
		Rings: false,
	},
	JUPITER: Planet {
		planet: jupiter,
		Gravity: 2.36,
		RadiusKm: 69911,
		MassKg: 1.90e+27,
		OrbitKm: 7.79e+08,
		OrbitDays: 4333,
		SurfacePressureBars: 20,
		Moons: 4,
		Rings: true,
	},
	SATURN: Planet {
		planet: saturn,
		Gravity: 0.916,
		RadiusKm: 58232,
		MassKg: 5.68e+26,
		OrbitKm: 1.43e+09,
		OrbitDays: 10759,
		SurfacePressureBars: 1,
		Moons: 7,
		Rings: true,
	},
	URANUS: Planet {
		planet: uranus,
		Gravity: 0.889,
		RadiusKm: 25362,
		MassKg: 8.68e+25,
		OrbitKm: 2.87e+09,
		OrbitDays: 30687,
		SurfacePressureBars: 1.3,
		Moons: 13,
		Rings: true,
	},
	NEPTUNE: Planet {
		planet: neptune,
		Gravity: 1.12,
		RadiusKm: 24622,
		MassKg: 1.02e+26,
		OrbitKm: 4.50e+09,
		OrbitDays: 60190,
		SurfacePressureBars: 1.5,
		Moons: 2,
		Rings: true,
	},
}

	var invalidPlanet = Planet{}
	
func (p planetsContainer) allSlice() []Planet {
	return []Planet{
		Planets.MERCURY,
		Planets.VENUS,
		Planets.EARTH,
		Planets.MARS,
		Planets.JUPITER,
		Planets.SATURN,
		Planets.URANUS,
		Planets.NEPTUNE,
	}
}
func (p planetsContainer) All() iter.Seq[Planet] {
	return func(yield func(Planet) bool) {
		for _, v := range p.allSlice() {
			if !yield(v) {
				return
			}
		}
	}
}
	
func ParsePlanet(input any) (Planet, error) {
	var res = invalidPlanet
	switch v := input.(type) {
	case Planet:
		return v, nil
	case string:
		res = stringToPlanet(v)
	case fmt.Stringer:
		res = stringToPlanet(v.String())
	case []byte:
		res = stringToPlanet(string(v))
	case int:
		res = numberToPlanet(v)
	case int8:
		res = numberToPlanet(v)
	case int16:
		res = numberToPlanet(v)
	case int32:
		res = numberToPlanet(v)
	case int64:
		res = numberToPlanet(v)
	case uint:
		res = numberToPlanet(v)
	case uint8:
		res = numberToPlanet(v)
	case uint16:
		res = numberToPlanet(v)
	case uint32:
		res = numberToPlanet(v)
	case uint64:
		res = numberToPlanet(v)
	case float32:
		res = numberToPlanet(v)
	case float64:
		res = numberToPlanet(v)
	default:
		return res, fmt.Errorf("invalid type %T", input)
	}
	return res, nil
}

var planetsNameMap = map[string]Planet{
    "Mercury": Planets.MERCURY,
    "warmone": Planets.MERCURY,
    "mercury": Planets.MERCURY,
    "Venus": Planets.VENUS,
    "verywarmone": Planets.VENUS,
    "venus": Planets.VENUS,
    "Earth": Planets.EARTH,
    "chillin": Planets.EARTH,
    "earth": Planets.EARTH,
    "Mars": Planets.MARS,
    "mars": Planets.MARS,
    "Jupiter": Planets.JUPITER,
    "jupiter": Planets.JUPITER,
    "Saturn": Planets.SATURN,
    "saturn": Planets.SATURN,
    "Uranus": Planets.URANUS,
    "uranus": Planets.URANUS,
    "Neptune": Planets.NEPTUNE,
    "neptune": Planets.NEPTUNE,
}

func stringToPlanet(s string) Planet {
  if t, ok := planetsNameMap[s]; ok {
    return t
  }
  return invalidPlanet
}


type integer interface {
    ~int | ~int8 | ~int16 | ~int32 | ~int64 | ~uint | ~uint8 | ~uint16 | ~uint32 | ~uint64
}

type float interface {
    ~float32 | ~float64
}

type number interface {
    integer | float
}

// ToPlanet converts a numeric value to a Planet
func numberToPlanet[T number](num T) Planet {
	f := float64(num)
    if math.Floor(f) != f {
        return invalidPlanet
    }
	i := int(f)
	if i <= 0 || i > len(Planets.allSlice()) {
		return invalidPlanet
	}
	return Planets.allSlice()[i-1]
}


	func ExhaustivePlanets(f func(Planet)) {
		for _, p := range Planets.allSlice() {
			f(p)
		}
	}
	
var validPlanets = map[Planet]bool{
	Planets.MERCURY: true,
	Planets.VENUS: true,
	Planets.EARTH: true,
	Planets.MARS: true,
	Planets.JUPITER: true,
	Planets.SATURN: true,
	Planets.URANUS: true,
	Planets.NEPTUNE: true,
}

// IsValid checks whether the Planet value is valid.
// A valid value is one that is defined in the original enum and not marked as invalid.
func (p Planet) IsValid() bool {
	return validPlanets[p]
}

func (p Planet) MarshalJSON() ([]byte, error) {
	return []byte( p.String()), nil 
}
	
func (p *Planet) UnmarshalJSON(b []byte) error {
	b = bytes.Trim(bytes.Trim(b, "\""), "\"")
	newp, err := ParsePlanet(b)
	if err != nil {
		return err
	}
	*p = newp
	return nil
}

	func (p Planet) MarshalText() ([]byte, error) {
		return []byte(p.String()), nil
	}

	func (p *Planet) UnmarshalText(b []byte) error {
		newp, err := ParsePlanet(b)
		if err != nil {
			return err
		}
		*p = newp
		return nil
	}

func (p *Planet) Scan(value any) error {
	newp, err := ParsePlanet(value)
	if err != nil {
		return err
	}
	*p = newp
	return nil
}

func (p Planet) Value() (driver.Value, error) {
	return p.String(), nil
}

	func (p Planet) MarshalBinary() ([]byte, error) {
		return []byte(p.String()), nil
	}

	func (p *Planet) UnmarshalBinary(b []byte) error {
		newp, err := ParsePlanet(b)
		if err != nil {
			return err
		}
		*p = newp
		return nil
	}

	const PLANETName = "MercuryVenusEarthMarsJupiterSaturnUranusNeptune" 
	var PLANETIdx = [...]uint16{ 0, 7, 12, 17, 21, 28, 34, 40  }


	func (i Planet) String() string {
		if i < Planet(len(PLANETIdx)-1) {
			return PLANETName[PLANETIdx[i]:PLANETIdx[i+1]]
		}
		return PLANETName[len(PLANETIdx)-1]	
	}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the goenums command to generate them again.
	// Does not identify newly added constant values unless order changes
	var x [9]struct{}
	_ = x[unknown-1]
	_ = x[mercury-2]
	_ = x[venus-3]
	_ = x[earth-4]
	_ = x[mars-5]
	_ = x[jupiter-6]
	_ = x[saturn-7]
	_ = x[uranus-8]
	_ = x[neptune-9]
}
	