// Code generated by goenums v0.3.6. DO NOT EDIT.
// This file was generated by github.com/zarldev/goenums
// using the command:
// goenums testdata/multiple/multiple.go

package multipleenums

import (
	"bytes"
	"database/sql/driver"
	"fmt"
	"iter"
	"strconv"
)

type Order struct {
	order
}

type ordersContainer struct {
	CREATED     Order
	APPROVED    Order
	PROCESSING  Order
	READYTOSHIP Order
	SHIPPED     Order
	DELIVERED   Order
	CANCELLED   Order
}

var Orders = ordersContainer{
	CREATED: Order{
		order: created,
	},
	APPROVED: Order{
		order: approved,
	},
	PROCESSING: Order{
		order: processing,
	},
	READYTOSHIP: Order{
		order: readyToShip,
	},
	SHIPPED: Order{
		order: shipped,
	},
	DELIVERED: Order{
		order: delivered,
	},
	CANCELLED: Order{
		order: cancelled,
	},
}

var invalidOrder = Order{}

func (c ordersContainer) allSlice() []Order {
	return []Order{
		c.CREATED,
		c.APPROVED,
		c.PROCESSING,
		c.READYTOSHIP,
		c.SHIPPED,
		c.DELIVERED,
		c.CANCELLED,
	}
}

// AllSlice returns all valid Order values as a slice.
// Deprecated: Use All() with Go 1.23+ range over function types instead.
func (c ordersContainer) AllSlice() []Order {
	return c.allSlice()
}

// All returns all valid Order values.
func (c ordersContainer) All() iter.Seq[Order] {
	return func(yield func(Order) bool) {
		for _, v := range c.allSlice() {
			if !yield(v) {
				return
			}
		}
	}
}

func ParseOrder(a any) (Order, error) {
	res := invalidOrder
	switch v := a.(type) {
	case Order:
		return v, nil
	case []byte:
		res = stringToOrder(string(v))
	case string:
		res = stringToOrder(v)
	case fmt.Stringer:
		res = stringToOrder(v.String())
	case int:
		res = intToOrder(v)
	case int64:
		res = intToOrder(int(v))
	case int32:
		res = intToOrder(int(v))
	}
	return res, nil
}

var (
	_ordersNameMap = map[string]Order{
		"CREATED":       Orders.CREATED,
		"APPROVED":      Orders.APPROVED,
		"PROCESSING":    Orders.PROCESSING,
		"READY_TO_SHIP": Orders.READYTOSHIP,
		"SHIPPED":       Orders.SHIPPED,
		"DELIVERED":     Orders.DELIVERED,
		"CANCELLED":     Orders.CANCELLED,
	}
)

func stringToOrder(s string) Order {
	if v, ok := _ordersNameMap[s]; ok {
		return v
	}
	return invalidOrder
}

func intToOrder(i int) Order {
	if i < 0 || i >= len(Orders.allSlice()) {
		return invalidOrder
	}
	return Orders.allSlice()[i]
}

func ExhaustiveOrders(f func(Order)) {
	for _, p := range Orders.allSlice() {
		f(p)
	}
}

var validOrders = map[Order]bool{
	Orders.CREATED:     true,
	Orders.APPROVED:    true,
	Orders.PROCESSING:  true,
	Orders.READYTOSHIP: true,
	Orders.SHIPPED:     true,
	Orders.DELIVERED:   true,
	Orders.CANCELLED:   true,
}

func (p Order) IsValid() bool {
	return validOrders[p]
}

func (p Order) MarshalJSON() ([]byte, error) {
	return []byte(`"` + p.String() + `"`), nil
}

func (p *Order) UnmarshalJSON(b []byte) error {
	b = bytes.Trim(bytes.Trim(b, `"`), ` `)
	newp, err := ParseOrder(b)
	if err != nil {
		return err
	}
	*p = newp
	return nil
}

func (p *Order) Scan(value any) error {
	newp, err := ParseOrder(value)
	if err != nil {
		return err
	}
	*p = newp
	return nil
}

func (p Order) Value() (driver.Value, error) {
	return p.String(), nil
}

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the goenums command to generate them again.
	// Does not identify newly added constant values unless order changes
	var x [1]struct{}
	_ = x[created-0]
	_ = x[approved-1]
	_ = x[processing-2]
	_ = x[readyToShip-3]
	_ = x[shipped-4]
	_ = x[delivered-5]
	_ = x[cancelled-6]
}

const _orders_name = "CREATEDAPPROVEDPROCESSINGREADY_TO_SHIPSHIPPEDDELIVEREDCANCELLED"

var _orders_index = [...]uint16{0, 7, 15, 25, 38, 45, 54, 63}

func (i order) String() string {
	if i < 0 || i >= order(len(_orders_index)-1) {
		return "orders(" + (strconv.FormatInt(int64(i), 10) + ")")
	}
	return _orders_name[_orders_index[i]:_orders_index[i+1]]
}
